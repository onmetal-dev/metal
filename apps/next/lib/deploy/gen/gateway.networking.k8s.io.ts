// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability
to match requests by hostname, path, header, or query param. Filters can be
used to specify additional processing steps. Backends specify where matching
requests should be routed.
 *
 * @schema HTTPRoute
 */
export class HttpRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HTTPRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1',
    kind: 'HTTPRoute',
  }

  /**
   * Renders a Kubernetes manifest for "HTTPRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HttpRouteProps): any {
    return {
      ...HttpRoute.GVK,
      ...toJson_HttpRouteProps(props),
    };
  }

  /**
   * Defines a "HTTPRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HttpRouteProps) {
    super(scope, id, {
      ...HttpRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HttpRoute.GVK,
      ...toJson_HttpRouteProps(resolved),
    };
  }
}

/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability
 * to match requests by hostname, path, header, or query param. Filters can be
 * used to specify additional processing steps. Backends specify where matching
 * requests should be routed.
 *
 * @schema HTTPRoute
 */
export interface HttpRouteProps {
  /**
   * @schema HTTPRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of HTTPRoute.
   *
   * @schema HTTPRoute#spec
   */
  readonly spec: HttpRouteSpec;

}

/**
 * Converts an object of type 'HttpRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteProps(obj: HttpRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_HttpRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of HTTPRoute.
 *
 * @schema HttpRouteSpec
 */
export interface HttpRouteSpec {
  /**
   * Hostnames defines a set of hostnames that should match against the HTTP Host
   * header to select a HTTPRoute used to process the request. Implementations
   * MUST ignore any port value specified in the HTTP Host header while
   * performing a match and (absent of any applicable header modification
   * configuration) MUST forward this header unmodified to the backend.
   *
   *
   * Valid values for Hostnames are determined by RFC 1123 definition of a
   * hostname with 2 notable exceptions:
   *
   *
   * 1. IPs are not allowed.
   * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
   * label must appear by itself as the first label.
   *
   *
   * If a hostname is specified by both the Listener and HTTPRoute, there
   * must be at least one intersecting hostname for the HTTPRoute to be
   * attached to the Listener. For example:
   *
   *
   * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
   * that have either not specified any hostnames, or have specified at
   * least one of `test.example.com` or `*.example.com`.
   * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
   * that have either not specified any hostnames or have specified at least
   * one hostname that matches the Listener hostname. For example,
   * `*.example.com`, `test.example.com`, and `foo.test.example.com` would
   * all match. On the other hand, `example.com` and `test.example.net` would
   * not match.
   *
   *
   * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
   * as a suffix match. That means that a match for `*.example.com` would match
   * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
   *
   *
   * If both the Listener and HTTPRoute have specified hostnames, any
   * HTTPRoute hostnames that do not match the Listener hostname MUST be
   * ignored. For example, if a Listener specified `*.example.com`, and the
   * HTTPRoute specified `test.example.com` and `test.example.net`,
   * `test.example.net` must not be considered for a match.
   *
   *
   * If both the Listener and HTTPRoute have specified hostnames, and none
   * match with the criteria above, then the HTTPRoute is not accepted. The
   * implementation must raise an 'Accepted' Condition with a status of
   * `False` in the corresponding RouteParentStatus.
   *
   *
   * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
   * overlapping wildcard matching and exact matching hostnames), precedence must
   * be given to rules from the HTTPRoute with the largest number of:
   *
   *
   * * Characters in a matching non-wildcard hostname.
   * * Characters in a matching hostname.
   *
   *
   * If ties exist across multiple Routes, the matching precedence rules for
   * HTTPRouteMatches takes over.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpec#hostnames
   */
  readonly hostnames?: string[];

  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants
   * to be attached to. Note that the referenced parent resource needs to
   * allow this for the attachment to be complete. For Gateways, that means
   * the Gateway needs to allow attachment from Routes of this kind and
   * namespace. For Services, that means the Service must either be in the same
   * namespace for a "producer" route, or the mesh implementation must support
   * and allow "consumer" routes for the referenced Service. ReferenceGrant is
   * not applicable for governing ParentRefs to Services - it is not possible to
   * create a "producer" route for a Service in a different namespace from the
   * Route.
   *
   *
   * There are two kinds of parent resources with "Core" support:
   *
   *
   * * Gateway (Gateway conformance profile)
   * * Service (Mesh conformance profile, ClusterIP Services only)
   *
   *
   * This API may be extended in the future to support additional kinds of parent
   * resources.
   *
   *
   * ParentRefs must be _distinct_. This means either that:
   *
   *
   * * They select different objects.  If this is the case, then parentRef
   * entries are distinct. In terms of fields, this means that the
   * multi-part key defined by `group`, `kind`, `namespace`, and `name` must
   * be unique across all parentRef entries in the Route.
   * * They do not select different objects, but for each optional field used,
   * each ParentRef that selects the same object must set the same set of
   * optional fields to different values. If one ParentRef sets a
   * combination of optional fields, all must set the same combination.
   *
   *
   * Some examples:
   *
   *
   * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
   * same object must also set `sectionName`.
   * * If one ParentRef sets `port`, all ParentRefs referencing the same
   * object must also set `port`.
   * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
   * referencing the same object must also set `sectionName` and `port`.
   *
   *
   * It is possible to separately reference multiple distinct objects that may
   * be collapsed by an implementation. For example, some implementations may
   * choose to merge compatible Gateway Listeners together. If that is the
   * case, the list of routes attached to those resources should also be
   * merged.
   *
   *
   * Note that for ParentRefs that cross namespace boundaries, there are specific
   * rules. Cross-namespace references are only valid if they are explicitly
   * allowed by something in the namespace they are referring to. For example,
   * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
   * generic way to enable other kinds of cross-namespace reference.
   *
   *
   *
   * ParentRefs from a Route to a Service in the same namespace are "producer"
   * routes, which apply default routing rules to inbound connections from
   * any namespace to the Service.
   *
   *
   * ParentRefs from a Route to a Service in a different namespace are
   * "consumer" routes, and these routing rules are only applied to outbound
   * connections originating from the same namespace as the Route, for which
   * the intended destination of the connections are a Service targeted as a
   * ParentRef of the Route.
   *
   *
   *
   *
   *
   *
   *
   *
   * @schema HttpRouteSpec#parentRefs
   */
  readonly parentRefs?: HttpRouteSpecParentRefs[];

  /**
   * Rules are a list of HTTP matchers, filters and actions.
   *
   * @schema HttpRouteSpec#rules
   */
  readonly rules?: HttpRouteSpecRules[];

}

/**
 * Converts an object of type 'HttpRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpec(obj: HttpRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'parentRefs': obj.parentRefs?.map(y => toJson_HttpRouteSpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_HttpRouteSpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered
 * a parent of this resource (usually a route). There are two kinds of parent resources
 * with "Core" support:
 *
 *
 * * Gateway (Gateway conformance profile)
 * * Service (Mesh conformance profile, ClusterIP Services only)
 *
 *
 * This API may be extended in the future to support additional kinds of parent
 * resources.
 *
 *
 * The API object must be valid in the cluster; the Group and Kind must
 * be registered in the cluster for this reference to be valid.
 *
 * @schema HttpRouteSpecParentRefs
 */
export interface HttpRouteSpecParentRefs {
  /**
   * Group is the group of the referent.
   * When unspecified, "gateway.networking.k8s.io" is inferred.
   * To set the core API group (such as for a "Service" kind referent),
   * Group must be explicitly set to "" (empty string).
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   *
   *
   * There are two kinds of parent resources with "Core" support:
   *
   *
   * * Gateway (Gateway conformance profile)
   * * Service (Mesh conformance profile, ClusterIP Services only)
   *
   *
   * Support for other resources is Implementation-Specific.
   *
   * @schema HttpRouteSpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified, this refers
   * to the local namespace of the Route.
   *
   *
   * Note that there are specific rules for ParentRefs which cross namespace
   * boundaries. Cross-namespace references are only valid if they are explicitly
   * allowed by something in the namespace they are referring to. For example:
   * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
   * generic way to enable any other kind of cross-namespace reference.
   *
   *
   *
   * ParentRefs from a Route to a Service in the same namespace are "producer"
   * routes, which apply default routing rules to inbound connections from
   * any namespace to the Service.
   *
   *
   * ParentRefs from a Route to a Service in a different namespace are
   * "consumer" routes, and these routing rules are only applied to outbound
   * connections originating from the same namespace as the Route, for which
   * the intended destination of the connections are a Service targeted as a
   * ParentRef of the Route.
   *
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted
   * differently based on the type of parent resource.
   *
   *
   * When the parent resource is a Gateway, this targets all listeners
   * listening on the specified port that also support this kind of Route(and
   * select this Route). It's not recommended to set `Port` unless the
   * networking behaviors specified in a Route must apply to a specific port
   * as opposed to a listener(s) whose port(s) may be changed. When both Port
   * and SectionName are specified, the name and port of the selected listener
   * must match both specified values.
   *
   *
   *
   * When the parent resource is a Service, this targets a specific port in the
   * Service spec. When both Port (experimental) and SectionName are specified,
   * the name and port of the selected port must match both specified values.
   *
   *
   *
   * Implementations MAY choose to support other parent resources.
   * Implementations supporting other types of parent resources MUST clearly
   * document how/if Port is interpreted.
   *
   *
   * For the purpose of status, an attachment is considered successful as
   * long as the parent resource accepts it partially. For example, Gateway
   * listeners can restrict which Routes can attach to them by Route kind,
   * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
   * from the referencing Route, the Route MUST be considered successfully
   * attached. If no Gateway listeners accept attachment from this Route,
   * the Route MUST be considered detached from the Gateway.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the
   * following resources, SectionName is interpreted as the following:
   *
   *
   * * Gateway: Listener name. When both Port (experimental) and SectionName
   * are specified, the name and port of the selected listener must match
   * both specified values.
   * * Service: Port name. When both Port (experimental) and SectionName
   * are specified, the name and port of the selected listener must match
   * both specified values.
   *
   *
   * Implementations MAY choose to support attaching Routes to other resources.
   * If that is the case, they MUST clearly document how SectionName is
   * interpreted.
   *
   *
   * When unspecified (empty string), this will reference the entire resource.
   * For the purpose of status, an attachment is considered successful if at
   * least one section in the parent resource accepts it. For example, Gateway
   * listeners can restrict which Routes can attach to them by Route kind,
   * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
   * the referencing Route, the Route MUST be considered successfully
   * attached. If no Gateway listeners accept attachment from this Route, the
   * Route MUST be considered detached from the Gateway.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'HttpRouteSpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecParentRefs(obj: HttpRouteSpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteRule defines semantics for matching an HTTP request based on
 * conditions (matches), processing it (filters), and forwarding the request to
 * an API object (backendRefs).
 *
 * @schema HttpRouteSpecRules
 */
export interface HttpRouteSpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be
   * sent.
   *
   *
   * Failure behavior here depends on how many BackendRefs are specified and
   * how many are invalid.
   *
   *
   * If *all* entries in BackendRefs are invalid, and there are also no filters
   * specified in this route rule, *all* traffic which matches this rule MUST
   * receive a 500 status code.
   *
   *
   * See the HTTPBackendRef definition for the rules about what makes a single
   * HTTPBackendRef invalid.
   *
   *
   * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
   * requests that would have otherwise been routed to an invalid backend. If
   * multiple backends are specified, and some are invalid, the proportion of
   * requests that would otherwise have been routed to an invalid backend
   * MUST receive a 500 status code.
   *
   *
   * For example, if two backends are specified with equal weights, and one is
   * invalid, 50 percent of traffic must receive a 500. Implementations may
   * choose how that 50 percent is determined.
   *
   *
   * Support: Core for Kubernetes Service
   *
   *
   * Support: Extended for Kubernetes ServiceImport
   *
   *
   * Support: Implementation-specific for any other resource
   *
   *
   * Support for weight: Core
   *
   * @schema HttpRouteSpecRules#backendRefs
   */
  readonly backendRefs?: HttpRouteSpecRulesBackendRefs[];

  /**
   * Filters define the filters that are applied to requests that match
   * this rule.
   *
   *
   * Wherever possible, implementations SHOULD implement filters in the order
   * they are specified.
   *
   *
   * Implementations MAY choose to implement this ordering strictly, rejecting
   * any combination or order of filters that can not be supported. If implementations
   * choose a strict interpretation of filter ordering, they MUST clearly document
   * that behavior.
   *
   *
   * To reject an invalid combination or order of filters, implementations SHOULD
   * consider the Route Rules with this configuration invalid. If all Route Rules
   * in a Route are invalid, the entire Route would be considered invalid. If only
   * a portion of Route Rules are invalid, implementations MUST set the
   * "PartiallyInvalid" condition for the Route.
   *
   *
   * Conformance-levels at this level are defined based on the type of filter:
   *
   *
   * - ALL core filters MUST be supported by all implementations.
   * - Implementers are encouraged to support extended filters.
   * - Implementation-specific custom filters have no API guarantees across
   * implementations.
   *
   *
   * Specifying the same filter multiple times is not supported unless explicitly
   * indicated in the filter.
   *
   *
   * All filters are expected to be compatible with each other except for the
   * URLRewrite and RequestRedirect filters, which may not be combined. If an
   * implementation can not support other combinations of filters, they must clearly
   * document that limitation. In cases where incompatible or unsupported
   * filters are specified and cause the `Accepted` condition to be set to status
   * `False`, implementations may use the `IncompatibleFilters` reason to specify
   * this configuration error.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRules#filters
   */
  readonly filters?: HttpRouteSpecRulesFilters[];

  /**
   * Matches define conditions used for matching the rule against incoming
   * HTTP requests. Each match is independent, i.e. this rule will be matched
   * if **any** one of the matches is satisfied.
   *
   *
   * For example, take the following matches configuration:
   *
   *
   * ```
   * matches:
   * - path:
   * value: "/foo"
   * headers:
   * - name: "version"
   * value: "v2"
   * - path:
   * value: "/v2/foo"
   * ```
   *
   *
   * For a request to match against this rule, a request must satisfy
   * EITHER of the two conditions:
   *
   *
   * - path prefixed with `/foo` AND contains the header `version: v2`
   * - path prefix of `/v2/foo`
   *
   *
   * See the documentation for HTTPRouteMatch on how to specify multiple
   * match conditions that should be ANDed together.
   *
   *
   * If no matches are specified, the default is a prefix
   * path match on "/", which has the effect of matching every
   * HTTP request.
   *
   *
   * Proxy or Load Balancer routing configuration generated from HTTPRoutes
   * MUST prioritize matches based on the following criteria, continuing on
   * ties. Across all rules specified on applicable Routes, precedence must be
   * given to the match having:
   *
   *
   * * "Exact" path match.
   * * "Prefix" path match with largest number of characters.
   * * Method match.
   * * Largest number of header matches.
   * * Largest number of query param matches.
   *
   *
   * Note: The precedence of RegularExpression path matches are implementation-specific.
   *
   *
   * If ties still exist across multiple Routes, matching precedence MUST be
   * determined in order of the following criteria, continuing on ties:
   *
   *
   * * The oldest Route based on creation timestamp.
   * * The Route appearing first in alphabetical order by
   * "{namespace}/{name}".
   *
   *
   * If ties still exist within an HTTPRoute, matching precedence MUST be granted
   * to the FIRST matching rule (in list order) with a match meeting the above
   * criteria.
   *
   *
   * When no rules matching a request have been successfully attached to the
   * parent a request is coming from, a HTTP 404 status code MUST be returned.
   *
   * @schema HttpRouteSpecRules#matches
   */
  readonly matches?: HttpRouteSpecRulesMatches[];

  /**
   * SessionPersistence defines and configures session persistence
   * for the route rule.
   *
   *
   * Support: Extended
   *
   *
   *
   *
   * @schema HttpRouteSpecRules#sessionPersistence
   */
  readonly sessionPersistence?: HttpRouteSpecRulesSessionPersistence;

  /**
   * Timeouts defines the timeouts that can be configured for an HTTP request.
   *
   *
   * Support: Extended
   *
   *
   *
   *
   * @schema HttpRouteSpecRules#timeouts
   */
  readonly timeouts?: HttpRouteSpecRulesTimeouts;

}

/**
 * Converts an object of type 'HttpRouteSpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRules(obj: HttpRouteSpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_HttpRouteSpecRulesBackendRefs(y)),
    'filters': obj.filters?.map(y => toJson_HttpRouteSpecRulesFilters(y)),
    'matches': obj.matches?.map(y => toJson_HttpRouteSpecRulesMatches(y)),
    'sessionPersistence': toJson_HttpRouteSpecRulesSessionPersistence(obj.sessionPersistence),
    'timeouts': toJson_HttpRouteSpecRulesTimeouts(obj.timeouts),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
 *
 *
 * Note that when a namespace different than the local namespace is specified, a
 * ReferenceGrant object is required in the referent namespace to allow that
 * namespace's owner to accept the reference. See the ReferenceGrant
 * documentation for details.
 *
 *
 * <gateway:experimental:description>
 *
 *
 * When the BackendRef points to a Kubernetes Service, implementations SHOULD
 * honor the appProtocol field if it is set for the target Service Port.
 *
 *
 * Implementations supporting appProtocol SHOULD recognize the Kubernetes
 * Standard Application Protocols defined in KEP-3726.
 *
 *
 * If a Service appProtocol isn't specified, an implementation MAY infer the
 * backend protocol through its own means. Implementations MAY infer the
 * protocol from the Route type referring to the backend Service.
 *
 *
 * If a Route is not able to send traffic to the backend using the specified
 * protocol then the backend is considered invalid. Implementations MUST set the
 * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
 *
 *
 * </gateway:experimental:description>
 *
 * @schema HttpRouteSpecRulesBackendRefs
 */
export interface HttpRouteSpecRulesBackendRefs {
  /**
   * Filters defined at this level should be executed if and only if the
   * request is being forwarded to the backend defined here.
   *
   *
   * Support: Implementation-specific (For broader support of filters, use the
   * Filters field in HTTPRouteRule.)
   *
   * @schema HttpRouteSpecRulesBackendRefs#filters
   */
  readonly filters?: HttpRouteSpecRulesBackendRefsFilters[];

  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteSpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is the Kubernetes resource kind of the referent. For example
   * "Service".
   *
   *
   * Defaults to "Service" when not specified.
   *
   *
   * ExternalName services can refer to CNAME DNS records that may live
   * outside of the cluster and as such are difficult to reason about in
   * terms of conformance. They also may not be safe to forward to (see
   * CVE-2021-25740 for more information). Implementations SHOULD NOT
   * support ExternalName Services.
   *
   *
   * Support: Core (Services with a type other than ExternalName)
   *
   *
   * Support: Implementation-specific (Services with type ExternalName)
   *
   * @default Service" when not specified.
   * @schema HttpRouteSpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local
   * namespace is inferred.
   *
   *
   * Note that when a namespace different than the local namespace is specified,
   * a ReferenceGrant object is required in the referent namespace to allow that
   * namespace's owner to accept the reference. See the ReferenceGrant
   * documentation for details.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource.
   * Port is required when the referent is a Kubernetes Service. In this
   * case, the port number is the service port number, not the target port.
   * For other resources, destination port might be derived from the referent
   * resource or this field.
   *
   * @schema HttpRouteSpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced
   * backend. This is computed as weight/(sum of all weights in this
   * BackendRefs list). For non-zero values, there may be some epsilon from
   * the exact proportion defined here depending on the precision an
   * implementation supports. Weight is not a percentage and the sum of
   * weights does not need to equal 100.
   *
   *
   * If only one backend is specified and it has a weight greater than 0, 100%
   * of the traffic is forwarded to that backend. If weight is set to 0, no
   * traffic should be forwarded for this entry. If unspecified, weight
   * defaults to 1.
   *
   *
   * Support for this field varies based on the context where used.
   *
   * @schema HttpRouteSpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefs(obj: HttpRouteSpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'filters': obj.filters?.map(y => toJson_HttpRouteSpecRulesBackendRefsFilters(y)),
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the
 * request or response lifecycle. HTTPRouteFilters are meant as an extension
 * point to express processing that may be done in Gateway implementations. Some
 * examples include request or response modification, implementing
 * authentication strategies, rate-limiting, and traffic shaping. API
 * guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteSpecRulesFilters
 */
export interface HttpRouteSpecRulesFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the
   * "filter" behavior.  For example, resource "myroutefilter" in group
   * "networking.example.net"). ExtensionRef MUST NOT be used for core and
   * extended filters.
   *
   *
   * This filter can be used multiple times within the same rule.
   *
   *
   * Support: Implementation-specific
   *
   * @schema HttpRouteSpecRulesFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteSpecRulesFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request
   * headers.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteSpecRulesFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests.
   * Requests are sent to the specified destination, but responses from
   * that destination are ignored.
   *
   *
   * This filter can be used multiple times within the same rule. Note that
   * not all implementations will be able to support mirroring to multiple
   * backends.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteSpecRulesFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the
   * request with an HTTP redirection.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteSpecRulesFiltersRequestRedirect;

  /**
   * ResponseHeaderModifier defines a schema for a filter that modifies response
   * headers.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFilters#responseHeaderModifier
   */
  readonly responseHeaderModifier?: HttpRouteSpecRulesFiltersResponseHeaderModifier;

  /**
   * Type identifies the type of filter to apply. As with other API fields,
   * types are classified into three conformance levels:
   *
   *
   * - Core: Filter types and their corresponding configuration defined by
   * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
   * implementations must support core filters.
   *
   *
   * - Extended: Filter types and their corresponding configuration defined by
   * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
   * are encouraged to support extended filters.
   *
   *
   * - Implementation-specific: Filters that are defined and supported by
   * specific vendors.
   * In the future, filters showing convergence in behavior across multiple
   * implementations will be considered for inclusion in extended or core
   * conformance levels. Filter-specific configuration for such filters
   * is specified using the ExtensionRef field. `Type` should be set to
   * "ExtensionRef" for custom filters.
   *
   *
   * Implementers are encouraged to define custom implementation types to
   * extend the core API with implementation-specific behavior.
   *
   *
   * If a reference to a custom filter type cannot be resolved, the filter
   * MUST NOT be skipped. Instead, requests that would have been processed by
   * that filter MUST receive a HTTP error response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesFilters#type
   */
  readonly type: HttpRouteSpecRulesFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteSpecRulesFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFilters(obj: HttpRouteSpecRulesFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteSpecRulesFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteSpecRulesFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteSpecRulesFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteSpecRulesFiltersRequestRedirect(obj.requestRedirect),
    'responseHeaderModifier': toJson_HttpRouteSpecRulesFiltersResponseHeaderModifier(obj.responseHeaderModifier),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteSpecRulesFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteMatch defines the predicate used to match requests to a given
 * action. Multiple match types are ANDed together, i.e. the match will
 * evaluate to true only if all conditions are satisfied.
 *
 *
 * For example, the match below will match a HTTP request only if its path
 * starts with `/foo` AND it contains the `version: v1` header:
 *
 *
 * ```
 * match:
 *
 *
 * path:
 * value: "/foo"
 * headers:
 * - name: "version"
 * value "v1"
 *
 *
 * ```
 *
 * @schema HttpRouteSpecRulesMatches
 */
export interface HttpRouteSpecRulesMatches {
  /**
   * Headers specifies HTTP request header matchers. Multiple match values are
   * ANDed together, meaning, a request must match all the specified headers
   * to select the route.
   *
   * @schema HttpRouteSpecRulesMatches#headers
   */
  readonly headers?: HttpRouteSpecRulesMatchesHeaders[];

  /**
   * Method specifies HTTP method matcher.
   * When specified, this route will be matched only if the request has the
   * specified method.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesMatches#method
   */
  readonly method?: HttpRouteSpecRulesMatchesMethod;

  /**
   * Path specifies a HTTP request path matcher. If this field is not
   * specified, a default prefix match on the "/" path is provided.
   *
   * @schema HttpRouteSpecRulesMatches#path
   */
  readonly path?: HttpRouteSpecRulesMatchesPath;

  /**
   * QueryParams specifies HTTP query parameter matchers. Multiple match
   * values are ANDed together, meaning, a request must match all the
   * specified query parameters to select the route.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesMatches#queryParams
   */
  readonly queryParams?: HttpRouteSpecRulesMatchesQueryParams[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatches(obj: HttpRouteSpecRulesMatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_HttpRouteSpecRulesMatchesHeaders(y)),
    'method': obj.method,
    'path': toJson_HttpRouteSpecRulesMatchesPath(obj.path),
    'queryParams': obj.queryParams?.map(y => toJson_HttpRouteSpecRulesMatchesQueryParams(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SessionPersistence defines and configures session persistence
 * for the route rule.
 *
 *
 * Support: Extended
 *
 *
 *
 *
 * @schema HttpRouteSpecRulesSessionPersistence
 */
export interface HttpRouteSpecRulesSessionPersistence {
  /**
   * AbsoluteTimeout defines the absolute timeout of the persistent
   * session. Once the AbsoluteTimeout duration has elapsed, the
   * session becomes invalid.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesSessionPersistence#absoluteTimeout
   */
  readonly absoluteTimeout?: string;

  /**
   * CookieConfig provides configuration settings that are specific
   * to cookie-based session persistence.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesSessionPersistence#cookieConfig
   */
  readonly cookieConfig?: HttpRouteSpecRulesSessionPersistenceCookieConfig;

  /**
   * IdleTimeout defines the idle timeout of the persistent session.
   * Once the session has been idle for more than the specified
   * IdleTimeout duration, the session becomes invalid.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesSessionPersistence#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * SessionName defines the name of the persistent session token
   * which may be reflected in the cookie or the header. Users
   * should avoid reusing session names to prevent unintended
   * consequences, such as rejection or unpredictable behavior.
   *
   *
   * Support: Implementation-specific
   *
   * @schema HttpRouteSpecRulesSessionPersistence#sessionName
   */
  readonly sessionName?: string;

  /**
   * Type defines the type of session persistence such as through
   * the use a header or cookie. Defaults to cookie based session
   * persistence.
   *
   *
   * Support: Core for "Cookie" type
   *
   *
   * Support: Extended for "Header" type
   *
   * @default cookie based session
   * @schema HttpRouteSpecRulesSessionPersistence#type
   */
  readonly type?: HttpRouteSpecRulesSessionPersistenceType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesSessionPersistence' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesSessionPersistence(obj: HttpRouteSpecRulesSessionPersistence | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'absoluteTimeout': obj.absoluteTimeout,
    'cookieConfig': toJson_HttpRouteSpecRulesSessionPersistenceCookieConfig(obj.cookieConfig),
    'idleTimeout': obj.idleTimeout,
    'sessionName': obj.sessionName,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Timeouts defines the timeouts that can be configured for an HTTP request.
 *
 *
 * Support: Extended
 *
 *
 *
 *
 * @schema HttpRouteSpecRulesTimeouts
 */
export interface HttpRouteSpecRulesTimeouts {
  /**
   * BackendRequest specifies a timeout for an individual request from the gateway
   * to a backend. This covers the time from when the request first starts being
   * sent from the gateway to when the full response has been received from the backend.
   *
   *
   * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
   * completely. Implementations that cannot completely disable the timeout MUST
   * instead interpret the zero duration as the longest possible value to which
   * the timeout can be set.
   *
   *
   * An entire client HTTP transaction with a gateway, covered by the Request timeout,
   * may result in more than one call from the gateway to the destination backend,
   * for example, if automatic retries are supported.
   *
   *
   * Because the Request timeout encompasses the BackendRequest timeout, the value of
   * BackendRequest must be <= the value of Request timeout.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesTimeouts#backendRequest
   */
  readonly backendRequest?: string;

  /**
   * Request specifies the maximum duration for a gateway to respond to an HTTP request.
   * If the gateway has not been able to respond before this deadline is met, the gateway
   * MUST return a timeout error.
   *
   *
   * For example, setting the `rules.timeouts.request` field to the value `10s` in an
   * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
   * to complete.
   *
   *
   * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
   * completely. Implementations that cannot completely disable the timeout MUST
   * instead interpret the zero duration as the longest possible value to which
   * the timeout can be set.
   *
   *
   * This timeout is intended to cover as close to the whole request-response transaction
   * as possible although an implementation MAY choose to start the timeout after the entire
   * request stream has been received instead of immediately after the transaction is
   * initiated by the client.
   *
   *
   * When this field is unspecified, request timeout behavior is implementation-specific.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesTimeouts#request
   */
  readonly request?: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesTimeouts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesTimeouts(obj: HttpRouteSpecRulesTimeouts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRequest': obj.backendRequest,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the
 * request or response lifecycle. HTTPRouteFilters are meant as an extension
 * point to express processing that may be done in Gateway implementations. Some
 * examples include request or response modification, implementing
 * authentication strategies, rate-limiting, and traffic shaping. API
 * guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteSpecRulesBackendRefsFilters
 */
export interface HttpRouteSpecRulesBackendRefsFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the
   * "filter" behavior.  For example, resource "myroutefilter" in group
   * "networking.example.net"). ExtensionRef MUST NOT be used for core and
   * extended filters.
   *
   *
   * This filter can be used multiple times within the same rule.
   *
   *
   * Support: Implementation-specific
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteSpecRulesBackendRefsFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request
   * headers.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests.
   * Requests are sent to the specified destination, but responses from
   * that destination are ignored.
   *
   *
   * This filter can be used multiple times within the same rule. Note that
   * not all implementations will be able to support mirroring to multiple
   * backends.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteSpecRulesBackendRefsFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the
   * request with an HTTP redirection.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirect;

  /**
   * ResponseHeaderModifier defines a schema for a filter that modifies response
   * headers.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#responseHeaderModifier
   */
  readonly responseHeaderModifier?: HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier;

  /**
   * Type identifies the type of filter to apply. As with other API fields,
   * types are classified into three conformance levels:
   *
   *
   * - Core: Filter types and their corresponding configuration defined by
   * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
   * implementations must support core filters.
   *
   *
   * - Extended: Filter types and their corresponding configuration defined by
   * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
   * are encouraged to support extended filters.
   *
   *
   * - Implementation-specific: Filters that are defined and supported by
   * specific vendors.
   * In the future, filters showing convergence in behavior across multiple
   * implementations will be considered for inclusion in extended or core
   * conformance levels. Filter-specific configuration for such filters
   * is specified using the ExtensionRef field. `Type` should be set to
   * "ExtensionRef" for custom filters.
   *
   *
   * Implementers are encouraged to define custom implementation types to
   * extend the core API with implementation-specific behavior.
   *
   *
   * If a reference to a custom filter type cannot be resolved, the filter
   * MUST NOT be skipped. Instead, requests that would have been processed by
   * that filter MUST receive a HTTP error response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#type
   */
  readonly type: HttpRouteSpecRulesBackendRefsFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteSpecRulesBackendRefsFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFilters(obj: HttpRouteSpecRulesBackendRefsFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteSpecRulesBackendRefsFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirect(obj.requestRedirect),
    'responseHeaderModifier': toJson_HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier(obj.responseHeaderModifier),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExtensionRef is an optional, implementation-specific extension to the
 * "filter" behavior.  For example, resource "myroutefilter" in group
 * "networking.example.net"). ExtensionRef MUST NOT be used for core and
 * extended filters.
 *
 *
 * This filter can be used multiple times within the same rule.
 *
 *
 * Support: Implementation-specific
 *
 * @schema HttpRouteSpecRulesFiltersExtensionRef
 */
export interface HttpRouteSpecRulesFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteSpecRulesFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteSpecRulesFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersExtensionRef(obj: HttpRouteSpecRulesFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request
 * headers.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier
 */
export interface HttpRouteSpecRulesFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteSpecRulesFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteSpecRulesFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestHeaderModifier(obj: HttpRouteSpecRulesFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests.
 * Requests are sent to the specified destination, but responses from
 * that destination are ignored.
 *
 *
 * This filter can be used multiple times within the same rule. Note that
 * not all implementations will be able to support mirroring to multiple
 * backends.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersRequestMirror
 */
export interface HttpRouteSpecRulesFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   *
   *
   * Mirrored requests must be sent only to a single destination endpoint
   * within this BackendRef, irrespective of how many endpoints are present
   * within this BackendRef.
   *
   *
   * If the referent cannot be found, this BackendRef is invalid and must be
   * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
   * condition on the Route status is set to `status: False` and not configure
   * this backend in the underlying implementation.
   *
   *
   * If there is a cross-namespace reference to an *existing* object
   * that is not allowed by a ReferenceGrant, the controller must ensure the
   * "ResolvedRefs"  condition on the Route is set to `status: False`,
   * with the "RefNotPermitted" reason and not configure this backend in the
   * underlying implementation.
   *
   *
   * In either error case, the Message of the `ResolvedRefs` Condition
   * should be used to provide more detail about the problem.
   *
   *
   * Support: Extended for Kubernetes Service
   *
   *
   * Support: Implementation-specific for any other resource
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteSpecRulesFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestMirror(obj: HttpRouteSpecRulesFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteSpecRulesFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the
 * request with an HTTP redirection.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirect
 */
export interface HttpRouteSpecRulesFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location`
   * header in the response.
   * When empty, the hostname in the `Host` header of the request is used.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request.
   * The modified path is then used to construct the `Location` header. When
   * empty, the request path is used as-is.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteSpecRulesFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location`
   * header in the response.
   *
   *
   * If no port is specified, the redirect port MUST be derived using the
   * following rules:
   *
   *
   * * If redirect scheme is not-empty, the redirect port MUST be the well-known
   * port associated with the redirect scheme. Specifically "http" to port 80
   * and "https" to port 443. If the redirect scheme does not have a
   * well-known port, the listener port of the Gateway SHOULD be used.
   * * If redirect scheme is empty, the redirect port MUST be the Gateway
   * Listener port.
   *
   *
   * Implementations SHOULD NOT add the port number in the 'Location'
   * header in the following cases:
   *
   *
   * * A Location header that will use HTTP (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 80.
   * * A Location header that will use HTTPS (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 443.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in
   * the response. When empty, the scheme of the request is used.
   *
   *
   * Scheme redirects can affect the port of the redirect, for more information,
   * refer to the documentation for the port field of this filter.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteSpecRulesFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: HttpRouteSpecRulesFiltersRequestRedirectStatusCode;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestRedirect(obj: HttpRouteSpecRulesFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResponseHeaderModifier defines a schema for a filter that modifies response
 * headers.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersResponseHeaderModifier
 */
export interface HttpRouteSpecRulesFiltersResponseHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifier#add
   */
  readonly add?: HttpRouteSpecRulesFiltersResponseHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifier#set
   */
  readonly set?: HttpRouteSpecRulesFiltersResponseHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersResponseHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersResponseHeaderModifier(obj: HttpRouteSpecRulesFiltersResponseHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteSpecRulesFiltersResponseHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteSpecRulesFiltersResponseHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields,
 * types are classified into three conformance levels:
 *
 *
 * - Core: Filter types and their corresponding configuration defined by
 * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
 * implementations must support core filters.
 *
 *
 * - Extended: Filter types and their corresponding configuration defined by
 * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
 * are encouraged to support extended filters.
 *
 *
 * - Implementation-specific: Filters that are defined and supported by
 * specific vendors.
 * In the future, filters showing convergence in behavior across multiple
 * implementations will be considered for inclusion in extended or core
 * conformance levels. Filter-specific configuration for such filters
 * is specified using the ExtensionRef field. `Type` should be set to
 * "ExtensionRef" for custom filters.
 *
 *
 * Implementers are encouraged to define custom implementation types to
 * extend the core API with implementation-specific behavior.
 *
 *
 * If a reference to a custom filter type cannot be resolved, the filter
 * MUST NOT be skipped. Instead, requests that would have been processed by
 * that filter MUST receive a HTTP error response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesFiltersType
 */
export enum HttpRouteSpecRulesFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = "RequestHeaderModifier",
  /** ResponseHeaderModifier */
  RESPONSE_HEADER_MODIFIER = "ResponseHeaderModifier",
  /** RequestMirror */
  REQUEST_MIRROR = "RequestMirror",
  /** RequestRedirect */
  REQUEST_REDIRECT = "RequestRedirect",
  /** URLRewrite */
  URL_REWRITE = "URLRewrite",
  /** ExtensionRef */
  EXTENSION_REF = "ExtensionRef",
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersUrlRewrite
 */
export interface HttpRouteSpecRulesFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during
   * forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteSpecRulesFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersUrlRewrite(obj: HttpRouteSpecRulesFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
 * headers.
 *
 * @schema HttpRouteSpecRulesMatchesHeaders
 */
export interface HttpRouteSpecRulesMatchesHeaders {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, only the first
   * entry with an equivalent name MUST be considered for a match. Subsequent
   * entries with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   *
   * When a header is repeated in an HTTP request, it is
   * implementation-specific behavior as to how this is represented.
   * Generally, proxies should follow the guidance from the RFC:
   * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
   * processing a repeated header, with special handling for "Set-Cookie".
   *
   * @schema HttpRouteSpecRulesMatchesHeaders#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the header.
   *
   *
   * Support: Core (Exact)
   *
   *
   * Support: Implementation-specific (RegularExpression)
   *
   *
   * Since RegularExpression HeaderMatchType has implementation-specific
   * conformance, implementations can support POSIX, PCRE or any other dialects
   * of regular expressions. Please read the implementation's documentation to
   * determine the supported dialect.
   *
   * @schema HttpRouteSpecRulesMatchesHeaders#type
   */
  readonly type?: HttpRouteSpecRulesMatchesHeadersType;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesMatchesHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatchesHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatchesHeaders(obj: HttpRouteSpecRulesMatchesHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Method specifies HTTP method matcher.
 * When specified, this route will be matched only if the request has the
 * specified method.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesMatchesMethod
 */
export enum HttpRouteSpecRulesMatchesMethod {
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** DELETE */
  DELETE = "DELETE",
  /** CONNECT */
  CONNECT = "CONNECT",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** TRACE */
  TRACE = "TRACE",
  /** PATCH */
  PATCH = "PATCH",
}

/**
 * Path specifies a HTTP request path matcher. If this field is not
 * specified, a default prefix match on the "/" path is provided.
 *
 * @schema HttpRouteSpecRulesMatchesPath
 */
export interface HttpRouteSpecRulesMatchesPath {
  /**
   * Type specifies how to match against the path Value.
   *
   *
   * Support: Core (Exact, PathPrefix)
   *
   *
   * Support: Implementation-specific (RegularExpression)
   *
   * @schema HttpRouteSpecRulesMatchesPath#type
   */
  readonly type?: HttpRouteSpecRulesMatchesPathType;

  /**
   * Value of the HTTP path to match against.
   *
   * @schema HttpRouteSpecRulesMatchesPath#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatchesPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatchesPath(obj: HttpRouteSpecRulesMatchesPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
 * query parameters.
 *
 * @schema HttpRouteSpecRulesMatchesQueryParams
 */
export interface HttpRouteSpecRulesMatchesQueryParams {
  /**
   * Name is the name of the HTTP query param to be matched. This must be an
   * exact string match. (See
   * https://tools.ietf.org/html/rfc7230#section-2.7.3).
   *
   *
   * If multiple entries specify equivalent query param names, only the first
   * entry with an equivalent name MUST be considered for a match. Subsequent
   * entries with an equivalent query param name MUST be ignored.
   *
   *
   * If a query param is repeated in an HTTP request, the behavior is
   * purposely left undefined, since different data planes have different
   * capabilities. However, it is *recommended* that implementations should
   * match against the first value of the param if the data plane supports it,
   * as this behavior is expected in other load balancing contexts outside of
   * the Gateway API.
   *
   *
   * Users SHOULD NOT route traffic based on repeated query params to guard
   * themselves against potential differences in the implementations.
   *
   * @schema HttpRouteSpecRulesMatchesQueryParams#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the query parameter.
   *
   *
   * Support: Extended (Exact)
   *
   *
   * Support: Implementation-specific (RegularExpression)
   *
   *
   * Since RegularExpression QueryParamMatchType has Implementation-specific
   * conformance, implementations can support POSIX, PCRE or any other
   * dialects of regular expressions. Please read the implementation's
   * documentation to determine the supported dialect.
   *
   * @schema HttpRouteSpecRulesMatchesQueryParams#type
   */
  readonly type?: HttpRouteSpecRulesMatchesQueryParamsType;

  /**
   * Value is the value of HTTP query param to be matched.
   *
   * @schema HttpRouteSpecRulesMatchesQueryParams#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatchesQueryParams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatchesQueryParams(obj: HttpRouteSpecRulesMatchesQueryParams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CookieConfig provides configuration settings that are specific
 * to cookie-based session persistence.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesSessionPersistenceCookieConfig
 */
export interface HttpRouteSpecRulesSessionPersistenceCookieConfig {
  /**
   * LifetimeType specifies whether the cookie has a permanent or
   * session-based lifetime. A permanent cookie persists until its
   * specified expiry time, defined by the Expires or Max-Age cookie
   * attributes, while a session cookie is deleted when the current
   * session ends.
   *
   *
   * When set to "Permanent", AbsoluteTimeout indicates the
   * cookie's lifetime via the Expires or Max-Age cookie attributes
   * and is required.
   *
   *
   * When set to "Session", AbsoluteTimeout indicates the
   * absolute lifetime of the cookie tracked by the gateway and
   * is optional.
   *
   *
   * Support: Core for "Session" type
   *
   *
   * Support: Extended for "Permanent" type
   *
   * @schema HttpRouteSpecRulesSessionPersistenceCookieConfig#lifetimeType
   */
  readonly lifetimeType?: HttpRouteSpecRulesSessionPersistenceCookieConfigLifetimeType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesSessionPersistenceCookieConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesSessionPersistenceCookieConfig(obj: HttpRouteSpecRulesSessionPersistenceCookieConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lifetimeType': obj.lifetimeType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type defines the type of session persistence such as through
 * the use a header or cookie. Defaults to cookie based session
 * persistence.
 *
 *
 * Support: Core for "Cookie" type
 *
 *
 * Support: Extended for "Header" type
 *
 * @default cookie based session
 * @schema HttpRouteSpecRulesSessionPersistenceType
 */
export enum HttpRouteSpecRulesSessionPersistenceType {
  /** Cookie */
  COOKIE = "Cookie",
  /** Header */
  HEADER = "Header",
}

/**
 * ExtensionRef is an optional, implementation-specific extension to the
 * "filter" behavior.  For example, resource "myroutefilter" in group
 * "networking.example.net"). ExtensionRef MUST NOT be used for core and
 * extended filters.
 *
 *
 * This filter can be used multiple times within the same rule.
 *
 *
 * Support: Implementation-specific
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef
 */
export interface HttpRouteSpecRulesBackendRefsFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersExtensionRef(obj: HttpRouteSpecRulesBackendRefsFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request
 * headers.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier(obj: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests.
 * Requests are sent to the specified destination, but responses from
 * that destination are ignored.
 *
 *
 * This filter can be used multiple times within the same rule. Note that
 * not all implementations will be able to support mirroring to multiple
 * backends.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirror
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   *
   *
   * Mirrored requests must be sent only to a single destination endpoint
   * within this BackendRef, irrespective of how many endpoints are present
   * within this BackendRef.
   *
   *
   * If the referent cannot be found, this BackendRef is invalid and must be
   * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
   * condition on the Route status is set to `status: False` and not configure
   * this backend in the underlying implementation.
   *
   *
   * If there is a cross-namespace reference to an *existing* object
   * that is not allowed by a ReferenceGrant, the controller must ensure the
   * "ResolvedRefs"  condition on the Route is set to `status: False`,
   * with the "RefNotPermitted" reason and not configure this backend in the
   * underlying implementation.
   *
   *
   * In either error case, the Message of the `ResolvedRefs` Condition
   * should be used to provide more detail about the problem.
   *
   *
   * Support: Extended for Kubernetes Service
   *
   *
   * Support: Implementation-specific for any other resource
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirror(obj: HttpRouteSpecRulesBackendRefsFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the
 * request with an HTTP redirection.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location`
   * header in the response.
   * When empty, the hostname in the `Host` header of the request is used.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request.
   * The modified path is then used to construct the `Location` header. When
   * empty, the request path is used as-is.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location`
   * header in the response.
   *
   *
   * If no port is specified, the redirect port MUST be derived using the
   * following rules:
   *
   *
   * * If redirect scheme is not-empty, the redirect port MUST be the well-known
   * port associated with the redirect scheme. Specifically "http" to port 80
   * and "https" to port 443. If the redirect scheme does not have a
   * well-known port, the listener port of the Gateway SHOULD be used.
   * * If redirect scheme is empty, the redirect port MUST be the Gateway
   * Listener port.
   *
   *
   * Implementations SHOULD NOT add the port number in the 'Location'
   * header in the following cases:
   *
   *
   * * A Location header that will use HTTP (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 80.
   * * A Location header that will use HTTPS (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 443.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in
   * the response. When empty, the scheme of the request is used.
   *
   *
   * Scheme redirects can affect the port of the redirect, for more information,
   * refer to the documentation for the port field of this filter.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectStatusCode;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirect(obj: HttpRouteSpecRulesBackendRefsFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResponseHeaderModifier defines a schema for a filter that modifies response
 * headers.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier
 */
export interface HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier#add
   */
  readonly add?: HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier#set
   */
  readonly set?: HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier(obj: HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields,
 * types are classified into three conformance levels:
 *
 *
 * - Core: Filter types and their corresponding configuration defined by
 * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
 * implementations must support core filters.
 *
 *
 * - Extended: Filter types and their corresponding configuration defined by
 * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
 * are encouraged to support extended filters.
 *
 *
 * - Implementation-specific: Filters that are defined and supported by
 * specific vendors.
 * In the future, filters showing convergence in behavior across multiple
 * implementations will be considered for inclusion in extended or core
 * conformance levels. Filter-specific configuration for such filters
 * is specified using the ExtensionRef field. `Type` should be set to
 * "ExtensionRef" for custom filters.
 *
 *
 * Implementers are encouraged to define custom implementation types to
 * extend the core API with implementation-specific behavior.
 *
 *
 * If a reference to a custom filter type cannot be resolved, the filter
 * MUST NOT be skipped. Instead, requests that would have been processed by
 * that filter MUST receive a HTTP error response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersType
 */
export enum HttpRouteSpecRulesBackendRefsFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = "RequestHeaderModifier",
  /** ResponseHeaderModifier */
  RESPONSE_HEADER_MODIFIER = "ResponseHeaderModifier",
  /** RequestMirror */
  REQUEST_MIRROR = "RequestMirror",
  /** RequestRedirect */
  REQUEST_REDIRECT = "RequestRedirect",
  /** URLRewrite */
  URL_REWRITE = "URLRewrite",
  /** ExtensionRef */
  EXTENSION_REF = "ExtensionRef",
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewrite
 */
export interface HttpRouteSpecRulesBackendRefsFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during
   * forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewrite(obj: HttpRouteSpecRulesBackendRefsFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteSpecRulesFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierAdd(obj: HttpRouteSpecRulesFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierSet
 */
export interface HttpRouteSpecRulesFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierSet(obj: HttpRouteSpecRulesFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 *
 *
 * Mirrored requests must be sent only to a single destination endpoint
 * within this BackendRef, irrespective of how many endpoints are present
 * within this BackendRef.
 *
 *
 * If the referent cannot be found, this BackendRef is invalid and must be
 * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
 * condition on the Route status is set to `status: False` and not configure
 * this backend in the underlying implementation.
 *
 *
 * If there is a cross-namespace reference to an *existing* object
 * that is not allowed by a ReferenceGrant, the controller must ensure the
 * "ResolvedRefs"  condition on the Route is set to `status: False`,
 * with the "RefNotPermitted" reason and not configure this backend in the
 * underlying implementation.
 *
 *
 * In either error case, the Message of the `ResolvedRefs` Condition
 * should be used to provide more detail about the problem.
 *
 *
 * Support: Extended for Kubernetes Service
 *
 *
 * Support: Implementation-specific for any other resource
 *
 * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef
 */
export interface HttpRouteSpecRulesFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is the Kubernetes resource kind of the referent. For example
   * "Service".
   *
   *
   * Defaults to "Service" when not specified.
   *
   *
   * ExternalName services can refer to CNAME DNS records that may live
   * outside of the cluster and as such are difficult to reason about in
   * terms of conformance. They also may not be safe to forward to (see
   * CVE-2021-25740 for more information). Implementations SHOULD NOT
   * support ExternalName Services.
   *
   *
   * Support: Core (Services with a type other than ExternalName)
   *
   *
   * Support: Implementation-specific (Services with type ExternalName)
   *
   * @default Service" when not specified.
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local
   * namespace is inferred.
   *
   *
   * Note that when a namespace different than the local namespace is specified,
   * a ReferenceGrant object is required in the referent namespace to allow that
   * namespace's owner to accept the reference. See the ReferenceGrant
   * documentation for details.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource.
   * Port is required when the referent is a Kubernetes Service. In this
   * case, the port number is the service port number, not the target port.
   * For other resources, destination port might be derived from the referent
   * resource or this field.
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestMirrorBackendRef(obj: HttpRouteSpecRulesFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request.
 * The modified path is then used to construct the `Location` header. When
 * empty, the request path is used as-is.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectPath
 */
export interface HttpRouteSpecRulesFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteSpecRulesFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestRedirectPath(obj: HttpRouteSpecRulesFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in
 * the response. When empty, the scheme of the request is used.
 *
 *
 * Scheme redirects can affect the port of the redirect, for more information,
 * refer to the documentation for the port field of this filter.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectScheme
 */
export enum HttpRouteSpecRulesFiltersRequestRedirectScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * StatusCode is the HTTP status code to be used in response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectStatusCode
 */
export enum HttpRouteSpecRulesFiltersRequestRedirectStatusCode {
  /** 301 */
  VALUE_301 = 301,
  /** 302 */
  VALUE_302 = 302,
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesFiltersResponseHeaderModifierAdd
 */
export interface HttpRouteSpecRulesFiltersResponseHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersResponseHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersResponseHeaderModifierAdd(obj: HttpRouteSpecRulesFiltersResponseHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesFiltersResponseHeaderModifierSet
 */
export interface HttpRouteSpecRulesFiltersResponseHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesFiltersResponseHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersResponseHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersResponseHeaderModifierSet(obj: HttpRouteSpecRulesFiltersResponseHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines a path rewrite.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersUrlRewritePath
 */
export interface HttpRouteSpecRulesFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteSpecRulesFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersUrlRewritePath(obj: HttpRouteSpecRulesFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies how to match against the value of the header.
 *
 *
 * Support: Core (Exact)
 *
 *
 * Support: Implementation-specific (RegularExpression)
 *
 *
 * Since RegularExpression HeaderMatchType has implementation-specific
 * conformance, implementations can support POSIX, PCRE or any other dialects
 * of regular expressions. Please read the implementation's documentation to
 * determine the supported dialect.
 *
 * @schema HttpRouteSpecRulesMatchesHeadersType
 */
export enum HttpRouteSpecRulesMatchesHeadersType {
  /** Exact */
  EXACT = "Exact",
  /** RegularExpression */
  REGULAR_EXPRESSION = "RegularExpression",
}

/**
 * Type specifies how to match against the path Value.
 *
 *
 * Support: Core (Exact, PathPrefix)
 *
 *
 * Support: Implementation-specific (RegularExpression)
 *
 * @schema HttpRouteSpecRulesMatchesPathType
 */
export enum HttpRouteSpecRulesMatchesPathType {
  /** Exact */
  EXACT = "Exact",
  /** PathPrefix */
  PATH_PREFIX = "PathPrefix",
  /** RegularExpression */
  REGULAR_EXPRESSION = "RegularExpression",
}

/**
 * Type specifies how to match against the value of the query parameter.
 *
 *
 * Support: Extended (Exact)
 *
 *
 * Support: Implementation-specific (RegularExpression)
 *
 *
 * Since RegularExpression QueryParamMatchType has Implementation-specific
 * conformance, implementations can support POSIX, PCRE or any other
 * dialects of regular expressions. Please read the implementation's
 * documentation to determine the supported dialect.
 *
 * @schema HttpRouteSpecRulesMatchesQueryParamsType
 */
export enum HttpRouteSpecRulesMatchesQueryParamsType {
  /** Exact */
  EXACT = "Exact",
  /** RegularExpression */
  REGULAR_EXPRESSION = "RegularExpression",
}

/**
 * LifetimeType specifies whether the cookie has a permanent or
 * session-based lifetime. A permanent cookie persists until its
 * specified expiry time, defined by the Expires or Max-Age cookie
 * attributes, while a session cookie is deleted when the current
 * session ends.
 *
 *
 * When set to "Permanent", AbsoluteTimeout indicates the
 * cookie's lifetime via the Expires or Max-Age cookie attributes
 * and is required.
 *
 *
 * When set to "Session", AbsoluteTimeout indicates the
 * absolute lifetime of the cookie tracked by the gateway and
 * is optional.
 *
 *
 * Support: Core for "Session" type
 *
 *
 * Support: Extended for "Permanent" type
 *
 * @schema HttpRouteSpecRulesSessionPersistenceCookieConfigLifetimeType
 */
export enum HttpRouteSpecRulesSessionPersistenceCookieConfigLifetimeType {
  /** Permanent */
  PERMANENT = "Permanent",
  /** Session */
  SESSION = "Session",
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd(obj: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet(obj: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 *
 *
 * Mirrored requests must be sent only to a single destination endpoint
 * within this BackendRef, irrespective of how many endpoints are present
 * within this BackendRef.
 *
 *
 * If the referent cannot be found, this BackendRef is invalid and must be
 * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
 * condition on the Route status is set to `status: False` and not configure
 * this backend in the underlying implementation.
 *
 *
 * If there is a cross-namespace reference to an *existing* object
 * that is not allowed by a ReferenceGrant, the controller must ensure the
 * "ResolvedRefs"  condition on the Route is set to `status: False`,
 * with the "RefNotPermitted" reason and not configure this backend in the
 * underlying implementation.
 *
 *
 * In either error case, the Message of the `ResolvedRefs` Condition
 * should be used to provide more detail about the problem.
 *
 *
 * Support: Extended for Kubernetes Service
 *
 *
 * Support: Implementation-specific for any other resource
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is the Kubernetes resource kind of the referent. For example
   * "Service".
   *
   *
   * Defaults to "Service" when not specified.
   *
   *
   * ExternalName services can refer to CNAME DNS records that may live
   * outside of the cluster and as such are difficult to reason about in
   * terms of conformance. They also may not be safe to forward to (see
   * CVE-2021-25740 for more information). Implementations SHOULD NOT
   * support ExternalName Services.
   *
   *
   * Support: Core (Services with a type other than ExternalName)
   *
   *
   * Support: Implementation-specific (Services with type ExternalName)
   *
   * @default Service" when not specified.
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local
   * namespace is inferred.
   *
   *
   * Note that when a namespace different than the local namespace is specified,
   * a ReferenceGrant object is required in the referent namespace to allow that
   * namespace's owner to accept the reference. See the ReferenceGrant
   * documentation for details.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource.
   * Port is required when the referent is a Kubernetes Service. In this
   * case, the port number is the service port number, not the target port.
   * For other resources, destination port might be derived from the referent
   * resource or this field.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj: HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request.
 * The modified path is then used to construct the `Location` header. When
 * empty, the request path is used as-is.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath(obj: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in
 * the response. When empty, the scheme of the request is used.
 *
 *
 * Scheme redirects can affect the port of the redirect, for more information,
 * refer to the documentation for the port field of this filter.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectScheme
 */
export enum HttpRouteSpecRulesBackendRefsFiltersRequestRedirectScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * StatusCode is the HTTP status code to be used in response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectStatusCode
 */
export enum HttpRouteSpecRulesBackendRefsFiltersRequestRedirectStatusCode {
  /** 301 */
  VALUE_301 = 301,
  /** 302 */
  VALUE_302 = 302,
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd
 */
export interface HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd(obj: HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet
 */
export interface HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet(obj: HttpRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines a path rewrite.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath
 */
export interface HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteSpecRulesBackendRefsFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath(obj: HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectPathType
 */
export enum HttpRouteSpecRulesFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesFiltersUrlRewritePathType
 */
export enum HttpRouteSpecRulesFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPathType
 */
export enum HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePathType
 */
export enum HttpRouteSpecRulesBackendRefsFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}


/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability
to match requests by hostname, path, header, or query param. Filters can be
used to specify additional processing steps. Backends specify where matching
requests should be routed.
 *
 * @schema HTTPRouteV1Beta1
 */
export class HttpRouteV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HTTPRouteV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1beta1',
    kind: 'HTTPRoute',
  }

  /**
   * Renders a Kubernetes manifest for "HTTPRouteV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HttpRouteV1Beta1Props): any {
    return {
      ...HttpRouteV1Beta1.GVK,
      ...toJson_HttpRouteV1Beta1Props(props),
    };
  }

  /**
   * Defines a "HTTPRouteV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HttpRouteV1Beta1Props) {
    super(scope, id, {
      ...HttpRouteV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HttpRouteV1Beta1.GVK,
      ...toJson_HttpRouteV1Beta1Props(resolved),
    };
  }
}

/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability
 * to match requests by hostname, path, header, or query param. Filters can be
 * used to specify additional processing steps. Backends specify where matching
 * requests should be routed.
 *
 * @schema HTTPRouteV1Beta1
 */
export interface HttpRouteV1Beta1Props {
  /**
   * @schema HTTPRouteV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of HTTPRoute.
   *
   * @schema HTTPRouteV1Beta1#spec
   */
  readonly spec: HttpRouteV1Beta1Spec;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1Props(obj: HttpRouteV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_HttpRouteV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of HTTPRoute.
 *
 * @schema HttpRouteV1Beta1Spec
 */
export interface HttpRouteV1Beta1Spec {
  /**
   * Hostnames defines a set of hostnames that should match against the HTTP Host
   * header to select a HTTPRoute used to process the request. Implementations
   * MUST ignore any port value specified in the HTTP Host header while
   * performing a match and (absent of any applicable header modification
   * configuration) MUST forward this header unmodified to the backend.
   *
   *
   * Valid values for Hostnames are determined by RFC 1123 definition of a
   * hostname with 2 notable exceptions:
   *
   *
   * 1. IPs are not allowed.
   * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
   * label must appear by itself as the first label.
   *
   *
   * If a hostname is specified by both the Listener and HTTPRoute, there
   * must be at least one intersecting hostname for the HTTPRoute to be
   * attached to the Listener. For example:
   *
   *
   * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
   * that have either not specified any hostnames, or have specified at
   * least one of `test.example.com` or `*.example.com`.
   * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
   * that have either not specified any hostnames or have specified at least
   * one hostname that matches the Listener hostname. For example,
   * `*.example.com`, `test.example.com`, and `foo.test.example.com` would
   * all match. On the other hand, `example.com` and `test.example.net` would
   * not match.
   *
   *
   * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
   * as a suffix match. That means that a match for `*.example.com` would match
   * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
   *
   *
   * If both the Listener and HTTPRoute have specified hostnames, any
   * HTTPRoute hostnames that do not match the Listener hostname MUST be
   * ignored. For example, if a Listener specified `*.example.com`, and the
   * HTTPRoute specified `test.example.com` and `test.example.net`,
   * `test.example.net` must not be considered for a match.
   *
   *
   * If both the Listener and HTTPRoute have specified hostnames, and none
   * match with the criteria above, then the HTTPRoute is not accepted. The
   * implementation must raise an 'Accepted' Condition with a status of
   * `False` in the corresponding RouteParentStatus.
   *
   *
   * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
   * overlapping wildcard matching and exact matching hostnames), precedence must
   * be given to rules from the HTTPRoute with the largest number of:
   *
   *
   * * Characters in a matching non-wildcard hostname.
   * * Characters in a matching hostname.
   *
   *
   * If ties exist across multiple Routes, the matching precedence rules for
   * HTTPRouteMatches takes over.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1Spec#hostnames
   */
  readonly hostnames?: string[];

  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants
   * to be attached to. Note that the referenced parent resource needs to
   * allow this for the attachment to be complete. For Gateways, that means
   * the Gateway needs to allow attachment from Routes of this kind and
   * namespace. For Services, that means the Service must either be in the same
   * namespace for a "producer" route, or the mesh implementation must support
   * and allow "consumer" routes for the referenced Service. ReferenceGrant is
   * not applicable for governing ParentRefs to Services - it is not possible to
   * create a "producer" route for a Service in a different namespace from the
   * Route.
   *
   *
   * There are two kinds of parent resources with "Core" support:
   *
   *
   * * Gateway (Gateway conformance profile)
   * * Service (Mesh conformance profile, ClusterIP Services only)
   *
   *
   * This API may be extended in the future to support additional kinds of parent
   * resources.
   *
   *
   * ParentRefs must be _distinct_. This means either that:
   *
   *
   * * They select different objects.  If this is the case, then parentRef
   * entries are distinct. In terms of fields, this means that the
   * multi-part key defined by `group`, `kind`, `namespace`, and `name` must
   * be unique across all parentRef entries in the Route.
   * * They do not select different objects, but for each optional field used,
   * each ParentRef that selects the same object must set the same set of
   * optional fields to different values. If one ParentRef sets a
   * combination of optional fields, all must set the same combination.
   *
   *
   * Some examples:
   *
   *
   * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
   * same object must also set `sectionName`.
   * * If one ParentRef sets `port`, all ParentRefs referencing the same
   * object must also set `port`.
   * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
   * referencing the same object must also set `sectionName` and `port`.
   *
   *
   * It is possible to separately reference multiple distinct objects that may
   * be collapsed by an implementation. For example, some implementations may
   * choose to merge compatible Gateway Listeners together. If that is the
   * case, the list of routes attached to those resources should also be
   * merged.
   *
   *
   * Note that for ParentRefs that cross namespace boundaries, there are specific
   * rules. Cross-namespace references are only valid if they are explicitly
   * allowed by something in the namespace they are referring to. For example,
   * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
   * generic way to enable other kinds of cross-namespace reference.
   *
   *
   *
   * ParentRefs from a Route to a Service in the same namespace are "producer"
   * routes, which apply default routing rules to inbound connections from
   * any namespace to the Service.
   *
   *
   * ParentRefs from a Route to a Service in a different namespace are
   * "consumer" routes, and these routing rules are only applied to outbound
   * connections originating from the same namespace as the Route, for which
   * the intended destination of the connections are a Service targeted as a
   * ParentRef of the Route.
   *
   *
   *
   *
   *
   *
   *
   *
   * @schema HttpRouteV1Beta1Spec#parentRefs
   */
  readonly parentRefs?: HttpRouteV1Beta1SpecParentRefs[];

  /**
   * Rules are a list of HTTP matchers, filters and actions.
   *
   * @schema HttpRouteV1Beta1Spec#rules
   */
  readonly rules?: HttpRouteV1Beta1SpecRules[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1Spec(obj: HttpRouteV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'parentRefs': obj.parentRefs?.map(y => toJson_HttpRouteV1Beta1SpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_HttpRouteV1Beta1SpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered
 * a parent of this resource (usually a route). There are two kinds of parent resources
 * with "Core" support:
 *
 *
 * * Gateway (Gateway conformance profile)
 * * Service (Mesh conformance profile, ClusterIP Services only)
 *
 *
 * This API may be extended in the future to support additional kinds of parent
 * resources.
 *
 *
 * The API object must be valid in the cluster; the Group and Kind must
 * be registered in the cluster for this reference to be valid.
 *
 * @schema HttpRouteV1Beta1SpecParentRefs
 */
export interface HttpRouteV1Beta1SpecParentRefs {
  /**
   * Group is the group of the referent.
   * When unspecified, "gateway.networking.k8s.io" is inferred.
   * To set the core API group (such as for a "Service" kind referent),
   * Group must be explicitly set to "" (empty string).
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   *
   *
   * There are two kinds of parent resources with "Core" support:
   *
   *
   * * Gateway (Gateway conformance profile)
   * * Service (Mesh conformance profile, ClusterIP Services only)
   *
   *
   * Support for other resources is Implementation-Specific.
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified, this refers
   * to the local namespace of the Route.
   *
   *
   * Note that there are specific rules for ParentRefs which cross namespace
   * boundaries. Cross-namespace references are only valid if they are explicitly
   * allowed by something in the namespace they are referring to. For example:
   * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
   * generic way to enable any other kind of cross-namespace reference.
   *
   *
   *
   * ParentRefs from a Route to a Service in the same namespace are "producer"
   * routes, which apply default routing rules to inbound connections from
   * any namespace to the Service.
   *
   *
   * ParentRefs from a Route to a Service in a different namespace are
   * "consumer" routes, and these routing rules are only applied to outbound
   * connections originating from the same namespace as the Route, for which
   * the intended destination of the connections are a Service targeted as a
   * ParentRef of the Route.
   *
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted
   * differently based on the type of parent resource.
   *
   *
   * When the parent resource is a Gateway, this targets all listeners
   * listening on the specified port that also support this kind of Route(and
   * select this Route). It's not recommended to set `Port` unless the
   * networking behaviors specified in a Route must apply to a specific port
   * as opposed to a listener(s) whose port(s) may be changed. When both Port
   * and SectionName are specified, the name and port of the selected listener
   * must match both specified values.
   *
   *
   *
   * When the parent resource is a Service, this targets a specific port in the
   * Service spec. When both Port (experimental) and SectionName are specified,
   * the name and port of the selected port must match both specified values.
   *
   *
   *
   * Implementations MAY choose to support other parent resources.
   * Implementations supporting other types of parent resources MUST clearly
   * document how/if Port is interpreted.
   *
   *
   * For the purpose of status, an attachment is considered successful as
   * long as the parent resource accepts it partially. For example, Gateway
   * listeners can restrict which Routes can attach to them by Route kind,
   * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
   * from the referencing Route, the Route MUST be considered successfully
   * attached. If no Gateway listeners accept attachment from this Route,
   * the Route MUST be considered detached from the Gateway.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the
   * following resources, SectionName is interpreted as the following:
   *
   *
   * * Gateway: Listener name. When both Port (experimental) and SectionName
   * are specified, the name and port of the selected listener must match
   * both specified values.
   * * Service: Port name. When both Port (experimental) and SectionName
   * are specified, the name and port of the selected listener must match
   * both specified values.
   *
   *
   * Implementations MAY choose to support attaching Routes to other resources.
   * If that is the case, they MUST clearly document how SectionName is
   * interpreted.
   *
   *
   * When unspecified (empty string), this will reference the entire resource.
   * For the purpose of status, an attachment is considered successful if at
   * least one section in the parent resource accepts it. For example, Gateway
   * listeners can restrict which Routes can attach to them by Route kind,
   * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
   * the referencing Route, the Route MUST be considered successfully
   * attached. If no Gateway listeners accept attachment from this Route, the
   * Route MUST be considered detached from the Gateway.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecParentRefs(obj: HttpRouteV1Beta1SpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteRule defines semantics for matching an HTTP request based on
 * conditions (matches), processing it (filters), and forwarding the request to
 * an API object (backendRefs).
 *
 * @schema HttpRouteV1Beta1SpecRules
 */
export interface HttpRouteV1Beta1SpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be
   * sent.
   *
   *
   * Failure behavior here depends on how many BackendRefs are specified and
   * how many are invalid.
   *
   *
   * If *all* entries in BackendRefs are invalid, and there are also no filters
   * specified in this route rule, *all* traffic which matches this rule MUST
   * receive a 500 status code.
   *
   *
   * See the HTTPBackendRef definition for the rules about what makes a single
   * HTTPBackendRef invalid.
   *
   *
   * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
   * requests that would have otherwise been routed to an invalid backend. If
   * multiple backends are specified, and some are invalid, the proportion of
   * requests that would otherwise have been routed to an invalid backend
   * MUST receive a 500 status code.
   *
   *
   * For example, if two backends are specified with equal weights, and one is
   * invalid, 50 percent of traffic must receive a 500. Implementations may
   * choose how that 50 percent is determined.
   *
   *
   * Support: Core for Kubernetes Service
   *
   *
   * Support: Extended for Kubernetes ServiceImport
   *
   *
   * Support: Implementation-specific for any other resource
   *
   *
   * Support for weight: Core
   *
   * @schema HttpRouteV1Beta1SpecRules#backendRefs
   */
  readonly backendRefs?: HttpRouteV1Beta1SpecRulesBackendRefs[];

  /**
   * Filters define the filters that are applied to requests that match
   * this rule.
   *
   *
   * Wherever possible, implementations SHOULD implement filters in the order
   * they are specified.
   *
   *
   * Implementations MAY choose to implement this ordering strictly, rejecting
   * any combination or order of filters that can not be supported. If implementations
   * choose a strict interpretation of filter ordering, they MUST clearly document
   * that behavior.
   *
   *
   * To reject an invalid combination or order of filters, implementations SHOULD
   * consider the Route Rules with this configuration invalid. If all Route Rules
   * in a Route are invalid, the entire Route would be considered invalid. If only
   * a portion of Route Rules are invalid, implementations MUST set the
   * "PartiallyInvalid" condition for the Route.
   *
   *
   * Conformance-levels at this level are defined based on the type of filter:
   *
   *
   * - ALL core filters MUST be supported by all implementations.
   * - Implementers are encouraged to support extended filters.
   * - Implementation-specific custom filters have no API guarantees across
   * implementations.
   *
   *
   * Specifying the same filter multiple times is not supported unless explicitly
   * indicated in the filter.
   *
   *
   * All filters are expected to be compatible with each other except for the
   * URLRewrite and RequestRedirect filters, which may not be combined. If an
   * implementation can not support other combinations of filters, they must clearly
   * document that limitation. In cases where incompatible or unsupported
   * filters are specified and cause the `Accepted` condition to be set to status
   * `False`, implementations may use the `IncompatibleFilters` reason to specify
   * this configuration error.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRules#filters
   */
  readonly filters?: HttpRouteV1Beta1SpecRulesFilters[];

  /**
   * Matches define conditions used for matching the rule against incoming
   * HTTP requests. Each match is independent, i.e. this rule will be matched
   * if **any** one of the matches is satisfied.
   *
   *
   * For example, take the following matches configuration:
   *
   *
   * ```
   * matches:
   * - path:
   * value: "/foo"
   * headers:
   * - name: "version"
   * value: "v2"
   * - path:
   * value: "/v2/foo"
   * ```
   *
   *
   * For a request to match against this rule, a request must satisfy
   * EITHER of the two conditions:
   *
   *
   * - path prefixed with `/foo` AND contains the header `version: v2`
   * - path prefix of `/v2/foo`
   *
   *
   * See the documentation for HTTPRouteMatch on how to specify multiple
   * match conditions that should be ANDed together.
   *
   *
   * If no matches are specified, the default is a prefix
   * path match on "/", which has the effect of matching every
   * HTTP request.
   *
   *
   * Proxy or Load Balancer routing configuration generated from HTTPRoutes
   * MUST prioritize matches based on the following criteria, continuing on
   * ties. Across all rules specified on applicable Routes, precedence must be
   * given to the match having:
   *
   *
   * * "Exact" path match.
   * * "Prefix" path match with largest number of characters.
   * * Method match.
   * * Largest number of header matches.
   * * Largest number of query param matches.
   *
   *
   * Note: The precedence of RegularExpression path matches are implementation-specific.
   *
   *
   * If ties still exist across multiple Routes, matching precedence MUST be
   * determined in order of the following criteria, continuing on ties:
   *
   *
   * * The oldest Route based on creation timestamp.
   * * The Route appearing first in alphabetical order by
   * "{namespace}/{name}".
   *
   *
   * If ties still exist within an HTTPRoute, matching precedence MUST be granted
   * to the FIRST matching rule (in list order) with a match meeting the above
   * criteria.
   *
   *
   * When no rules matching a request have been successfully attached to the
   * parent a request is coming from, a HTTP 404 status code MUST be returned.
   *
   * @schema HttpRouteV1Beta1SpecRules#matches
   */
  readonly matches?: HttpRouteV1Beta1SpecRulesMatches[];

  /**
   * SessionPersistence defines and configures session persistence
   * for the route rule.
   *
   *
   * Support: Extended
   *
   *
   *
   *
   * @schema HttpRouteV1Beta1SpecRules#sessionPersistence
   */
  readonly sessionPersistence?: HttpRouteV1Beta1SpecRulesSessionPersistence;

  /**
   * Timeouts defines the timeouts that can be configured for an HTTP request.
   *
   *
   * Support: Extended
   *
   *
   *
   *
   * @schema HttpRouteV1Beta1SpecRules#timeouts
   */
  readonly timeouts?: HttpRouteV1Beta1SpecRulesTimeouts;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRules(obj: HttpRouteV1Beta1SpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefs(y)),
    'filters': obj.filters?.map(y => toJson_HttpRouteV1Beta1SpecRulesFilters(y)),
    'matches': obj.matches?.map(y => toJson_HttpRouteV1Beta1SpecRulesMatches(y)),
    'sessionPersistence': toJson_HttpRouteV1Beta1SpecRulesSessionPersistence(obj.sessionPersistence),
    'timeouts': toJson_HttpRouteV1Beta1SpecRulesTimeouts(obj.timeouts),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
 *
 *
 * Note that when a namespace different than the local namespace is specified, a
 * ReferenceGrant object is required in the referent namespace to allow that
 * namespace's owner to accept the reference. See the ReferenceGrant
 * documentation for details.
 *
 *
 * <gateway:experimental:description>
 *
 *
 * When the BackendRef points to a Kubernetes Service, implementations SHOULD
 * honor the appProtocol field if it is set for the target Service Port.
 *
 *
 * Implementations supporting appProtocol SHOULD recognize the Kubernetes
 * Standard Application Protocols defined in KEP-3726.
 *
 *
 * If a Service appProtocol isn't specified, an implementation MAY infer the
 * backend protocol through its own means. Implementations MAY infer the
 * protocol from the Route type referring to the backend Service.
 *
 *
 * If a Route is not able to send traffic to the backend using the specified
 * protocol then the backend is considered invalid. Implementations MUST set the
 * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
 *
 *
 * </gateway:experimental:description>
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefs
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefs {
  /**
   * Filters defined at this level should be executed if and only if the
   * request is being forwarded to the backend defined here.
   *
   *
   * Support: Implementation-specific (For broader support of filters, use the
   * Filters field in HTTPRouteRule.)
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#filters
   */
  readonly filters?: HttpRouteV1Beta1SpecRulesBackendRefsFilters[];

  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is the Kubernetes resource kind of the referent. For example
   * "Service".
   *
   *
   * Defaults to "Service" when not specified.
   *
   *
   * ExternalName services can refer to CNAME DNS records that may live
   * outside of the cluster and as such are difficult to reason about in
   * terms of conformance. They also may not be safe to forward to (see
   * CVE-2021-25740 for more information). Implementations SHOULD NOT
   * support ExternalName Services.
   *
   *
   * Support: Core (Services with a type other than ExternalName)
   *
   *
   * Support: Implementation-specific (Services with type ExternalName)
   *
   * @default Service" when not specified.
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local
   * namespace is inferred.
   *
   *
   * Note that when a namespace different than the local namespace is specified,
   * a ReferenceGrant object is required in the referent namespace to allow that
   * namespace's owner to accept the reference. See the ReferenceGrant
   * documentation for details.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource.
   * Port is required when the referent is a Kubernetes Service. In this
   * case, the port number is the service port number, not the target port.
   * For other resources, destination port might be derived from the referent
   * resource or this field.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced
   * backend. This is computed as weight/(sum of all weights in this
   * BackendRefs list). For non-zero values, there may be some epsilon from
   * the exact proportion defined here depending on the precision an
   * implementation supports. Weight is not a percentage and the sum of
   * weights does not need to equal 100.
   *
   *
   * If only one backend is specified and it has a weight greater than 0, 100%
   * of the traffic is forwarded to that backend. If weight is set to 0, no
   * traffic should be forwarded for this entry. If unspecified, weight
   * defaults to 1.
   *
   *
   * Support for this field varies based on the context where used.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefs(obj: HttpRouteV1Beta1SpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'filters': obj.filters?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFilters(y)),
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the
 * request or response lifecycle. HTTPRouteFilters are meant as an extension
 * point to express processing that may be done in Gateway implementations. Some
 * examples include request or response modification, implementing
 * authentication strategies, rate-limiting, and traffic shaping. API
 * guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteV1Beta1SpecRulesFilters
 */
export interface HttpRouteV1Beta1SpecRulesFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the
   * "filter" behavior.  For example, resource "myroutefilter" in group
   * "networking.example.net"). ExtensionRef MUST NOT be used for core and
   * extended filters.
   *
   *
   * This filter can be used multiple times within the same rule.
   *
   *
   * Support: Implementation-specific
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteV1Beta1SpecRulesFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request
   * headers.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests.
   * Requests are sent to the specified destination, but responses from
   * that destination are ignored.
   *
   *
   * This filter can be used multiple times within the same rule. Note that
   * not all implementations will be able to support mirroring to multiple
   * backends.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteV1Beta1SpecRulesFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the
   * request with an HTTP redirection.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirect;

  /**
   * ResponseHeaderModifier defines a schema for a filter that modifies response
   * headers.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#responseHeaderModifier
   */
  readonly responseHeaderModifier?: HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier;

  /**
   * Type identifies the type of filter to apply. As with other API fields,
   * types are classified into three conformance levels:
   *
   *
   * - Core: Filter types and their corresponding configuration defined by
   * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
   * implementations must support core filters.
   *
   *
   * - Extended: Filter types and their corresponding configuration defined by
   * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
   * are encouraged to support extended filters.
   *
   *
   * - Implementation-specific: Filters that are defined and supported by
   * specific vendors.
   * In the future, filters showing convergence in behavior across multiple
   * implementations will be considered for inclusion in extended or core
   * conformance levels. Filter-specific configuration for such filters
   * is specified using the ExtensionRef field. `Type` should be set to
   * "ExtensionRef" for custom filters.
   *
   *
   * Implementers are encouraged to define custom implementation types to
   * extend the core API with implementation-specific behavior.
   *
   *
   * If a reference to a custom filter type cannot be resolved, the filter
   * MUST NOT be skipped. Instead, requests that would have been processed by
   * that filter MUST receive a HTTP error response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteV1Beta1SpecRulesFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFilters(obj: HttpRouteV1Beta1SpecRulesFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteV1Beta1SpecRulesFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirect(obj.requestRedirect),
    'responseHeaderModifier': toJson_HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier(obj.responseHeaderModifier),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteMatch defines the predicate used to match requests to a given
 * action. Multiple match types are ANDed together, i.e. the match will
 * evaluate to true only if all conditions are satisfied.
 *
 *
 * For example, the match below will match a HTTP request only if its path
 * starts with `/foo` AND it contains the `version: v1` header:
 *
 *
 * ```
 * match:
 *
 *
 * path:
 * value: "/foo"
 * headers:
 * - name: "version"
 * value "v1"
 *
 *
 * ```
 *
 * @schema HttpRouteV1Beta1SpecRulesMatches
 */
export interface HttpRouteV1Beta1SpecRulesMatches {
  /**
   * Headers specifies HTTP request header matchers. Multiple match values are
   * ANDed together, meaning, a request must match all the specified headers
   * to select the route.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#headers
   */
  readonly headers?: HttpRouteV1Beta1SpecRulesMatchesHeaders[];

  /**
   * Method specifies HTTP method matcher.
   * When specified, this route will be matched only if the request has the
   * specified method.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#method
   */
  readonly method?: HttpRouteV1Beta1SpecRulesMatchesMethod;

  /**
   * Path specifies a HTTP request path matcher. If this field is not
   * specified, a default prefix match on the "/" path is provided.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesMatchesPath;

  /**
   * QueryParams specifies HTTP query parameter matchers. Multiple match
   * values are ANDed together, meaning, a request must match all the
   * specified query parameters to select the route.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#queryParams
   */
  readonly queryParams?: HttpRouteV1Beta1SpecRulesMatchesQueryParams[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatches(obj: HttpRouteV1Beta1SpecRulesMatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_HttpRouteV1Beta1SpecRulesMatchesHeaders(y)),
    'method': obj.method,
    'path': toJson_HttpRouteV1Beta1SpecRulesMatchesPath(obj.path),
    'queryParams': obj.queryParams?.map(y => toJson_HttpRouteV1Beta1SpecRulesMatchesQueryParams(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SessionPersistence defines and configures session persistence
 * for the route rule.
 *
 *
 * Support: Extended
 *
 *
 *
 *
 * @schema HttpRouteV1Beta1SpecRulesSessionPersistence
 */
export interface HttpRouteV1Beta1SpecRulesSessionPersistence {
  /**
   * AbsoluteTimeout defines the absolute timeout of the persistent
   * session. Once the AbsoluteTimeout duration has elapsed, the
   * session becomes invalid.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesSessionPersistence#absoluteTimeout
   */
  readonly absoluteTimeout?: string;

  /**
   * CookieConfig provides configuration settings that are specific
   * to cookie-based session persistence.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesSessionPersistence#cookieConfig
   */
  readonly cookieConfig?: HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig;

  /**
   * IdleTimeout defines the idle timeout of the persistent session.
   * Once the session has been idle for more than the specified
   * IdleTimeout duration, the session becomes invalid.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesSessionPersistence#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * SessionName defines the name of the persistent session token
   * which may be reflected in the cookie or the header. Users
   * should avoid reusing session names to prevent unintended
   * consequences, such as rejection or unpredictable behavior.
   *
   *
   * Support: Implementation-specific
   *
   * @schema HttpRouteV1Beta1SpecRulesSessionPersistence#sessionName
   */
  readonly sessionName?: string;

  /**
   * Type defines the type of session persistence such as through
   * the use a header or cookie. Defaults to cookie based session
   * persistence.
   *
   *
   * Support: Core for "Cookie" type
   *
   *
   * Support: Extended for "Header" type
   *
   * @default cookie based session
   * @schema HttpRouteV1Beta1SpecRulesSessionPersistence#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesSessionPersistenceType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesSessionPersistence' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesSessionPersistence(obj: HttpRouteV1Beta1SpecRulesSessionPersistence | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'absoluteTimeout': obj.absoluteTimeout,
    'cookieConfig': toJson_HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig(obj.cookieConfig),
    'idleTimeout': obj.idleTimeout,
    'sessionName': obj.sessionName,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Timeouts defines the timeouts that can be configured for an HTTP request.
 *
 *
 * Support: Extended
 *
 *
 *
 *
 * @schema HttpRouteV1Beta1SpecRulesTimeouts
 */
export interface HttpRouteV1Beta1SpecRulesTimeouts {
  /**
   * BackendRequest specifies a timeout for an individual request from the gateway
   * to a backend. This covers the time from when the request first starts being
   * sent from the gateway to when the full response has been received from the backend.
   *
   *
   * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
   * completely. Implementations that cannot completely disable the timeout MUST
   * instead interpret the zero duration as the longest possible value to which
   * the timeout can be set.
   *
   *
   * An entire client HTTP transaction with a gateway, covered by the Request timeout,
   * may result in more than one call from the gateway to the destination backend,
   * for example, if automatic retries are supported.
   *
   *
   * Because the Request timeout encompasses the BackendRequest timeout, the value of
   * BackendRequest must be <= the value of Request timeout.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesTimeouts#backendRequest
   */
  readonly backendRequest?: string;

  /**
   * Request specifies the maximum duration for a gateway to respond to an HTTP request.
   * If the gateway has not been able to respond before this deadline is met, the gateway
   * MUST return a timeout error.
   *
   *
   * For example, setting the `rules.timeouts.request` field to the value `10s` in an
   * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
   * to complete.
   *
   *
   * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
   * completely. Implementations that cannot completely disable the timeout MUST
   * instead interpret the zero duration as the longest possible value to which
   * the timeout can be set.
   *
   *
   * This timeout is intended to cover as close to the whole request-response transaction
   * as possible although an implementation MAY choose to start the timeout after the entire
   * request stream has been received instead of immediately after the transaction is
   * initiated by the client.
   *
   *
   * When this field is unspecified, request timeout behavior is implementation-specific.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesTimeouts#request
   */
  readonly request?: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesTimeouts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesTimeouts(obj: HttpRouteV1Beta1SpecRulesTimeouts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRequest': obj.backendRequest,
    'request': obj.request,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the
 * request or response lifecycle. HTTPRouteFilters are meant as an extension
 * point to express processing that may be done in Gateway implementations. Some
 * examples include request or response modification, implementing
 * authentication strategies, rate-limiting, and traffic shaping. API
 * guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the
   * "filter" behavior.  For example, resource "myroutefilter" in group
   * "networking.example.net"). ExtensionRef MUST NOT be used for core and
   * extended filters.
   *
   *
   * This filter can be used multiple times within the same rule.
   *
   *
   * Support: Implementation-specific
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request
   * headers.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests.
   * Requests are sent to the specified destination, but responses from
   * that destination are ignored.
   *
   *
   * This filter can be used multiple times within the same rule. Note that
   * not all implementations will be able to support mirroring to multiple
   * backends.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the
   * request with an HTTP redirection.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect;

  /**
   * ResponseHeaderModifier defines a schema for a filter that modifies response
   * headers.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#responseHeaderModifier
   */
  readonly responseHeaderModifier?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier;

  /**
   * Type identifies the type of filter to apply. As with other API fields,
   * types are classified into three conformance levels:
   *
   *
   * - Core: Filter types and their corresponding configuration defined by
   * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
   * implementations must support core filters.
   *
   *
   * - Extended: Filter types and their corresponding configuration defined by
   * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
   * are encouraged to support extended filters.
   *
   *
   * - Implementation-specific: Filters that are defined and supported by
   * specific vendors.
   * In the future, filters showing convergence in behavior across multiple
   * implementations will be considered for inclusion in extended or core
   * conformance levels. Filter-specific configuration for such filters
   * is specified using the ExtensionRef field. `Type` should be set to
   * "ExtensionRef" for custom filters.
   *
   *
   * Implementers are encouraged to define custom implementation types to
   * extend the core API with implementation-specific behavior.
   *
   *
   * If a reference to a custom filter type cannot be resolved, the filter
   * MUST NOT be skipped. Instead, requests that would have been processed by
   * that filter MUST receive a HTTP error response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesBackendRefsFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFilters(obj: HttpRouteV1Beta1SpecRulesBackendRefsFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect(obj.requestRedirect),
    'responseHeaderModifier': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier(obj.responseHeaderModifier),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExtensionRef is an optional, implementation-specific extension to the
 * "filter" behavior.  For example, resource "myroutefilter" in group
 * "networking.example.net"). ExtensionRef MUST NOT be used for core and
 * extended filters.
 *
 *
 * This filter can be used multiple times within the same rule.
 *
 *
 * Support: Implementation-specific
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef
 */
export interface HttpRouteV1Beta1SpecRulesFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersExtensionRef(obj: HttpRouteV1Beta1SpecRulesFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request
 * headers.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier(obj: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests.
 * Requests are sent to the specified destination, but responses from
 * that destination are ignored.
 *
 *
 * This filter can be used multiple times within the same rule. Note that
 * not all implementations will be able to support mirroring to multiple
 * backends.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirror
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   *
   *
   * Mirrored requests must be sent only to a single destination endpoint
   * within this BackendRef, irrespective of how many endpoints are present
   * within this BackendRef.
   *
   *
   * If the referent cannot be found, this BackendRef is invalid and must be
   * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
   * condition on the Route status is set to `status: False` and not configure
   * this backend in the underlying implementation.
   *
   *
   * If there is a cross-namespace reference to an *existing* object
   * that is not allowed by a ReferenceGrant, the controller must ensure the
   * "ResolvedRefs"  condition on the Route is set to `status: False`,
   * with the "RefNotPermitted" reason and not configure this backend in the
   * underlying implementation.
   *
   *
   * In either error case, the Message of the `ResolvedRefs` Condition
   * should be used to provide more detail about the problem.
   *
   *
   * Support: Extended for Kubernetes Service
   *
   *
   * Support: Implementation-specific for any other resource
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirror(obj: HttpRouteV1Beta1SpecRulesFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the
 * request with an HTTP redirection.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location`
   * header in the response.
   * When empty, the hostname in the `Host` header of the request is used.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request.
   * The modified path is then used to construct the `Location` header. When
   * empty, the request path is used as-is.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location`
   * header in the response.
   *
   *
   * If no port is specified, the redirect port MUST be derived using the
   * following rules:
   *
   *
   * * If redirect scheme is not-empty, the redirect port MUST be the well-known
   * port associated with the redirect scheme. Specifically "http" to port 80
   * and "https" to port 443. If the redirect scheme does not have a
   * well-known port, the listener port of the Gateway SHOULD be used.
   * * If redirect scheme is empty, the redirect port MUST be the Gateway
   * Listener port.
   *
   *
   * Implementations SHOULD NOT add the port number in the 'Location'
   * header in the following cases:
   *
   *
   * * A Location header that will use HTTP (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 80.
   * * A Location header that will use HTTPS (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 443.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in
   * the response. When empty, the scheme of the request is used.
   *
   *
   * Scheme redirects can affect the port of the redirect, for more information,
   * refer to the documentation for the port field of this filter.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectStatusCode;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirect(obj: HttpRouteV1Beta1SpecRulesFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResponseHeaderModifier defines a schema for a filter that modifies response
 * headers.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier
 */
export interface HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier#add
   */
  readonly add?: HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier#set
   */
  readonly set?: HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier(obj: HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields,
 * types are classified into three conformance levels:
 *
 *
 * - Core: Filter types and their corresponding configuration defined by
 * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
 * implementations must support core filters.
 *
 *
 * - Extended: Filter types and their corresponding configuration defined by
 * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
 * are encouraged to support extended filters.
 *
 *
 * - Implementation-specific: Filters that are defined and supported by
 * specific vendors.
 * In the future, filters showing convergence in behavior across multiple
 * implementations will be considered for inclusion in extended or core
 * conformance levels. Filter-specific configuration for such filters
 * is specified using the ExtensionRef field. `Type` should be set to
 * "ExtensionRef" for custom filters.
 *
 *
 * Implementers are encouraged to define custom implementation types to
 * extend the core API with implementation-specific behavior.
 *
 *
 * If a reference to a custom filter type cannot be resolved, the filter
 * MUST NOT be skipped. Instead, requests that would have been processed by
 * that filter MUST receive a HTTP error response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersType
 */
export enum HttpRouteV1Beta1SpecRulesFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = "RequestHeaderModifier",
  /** ResponseHeaderModifier */
  RESPONSE_HEADER_MODIFIER = "ResponseHeaderModifier",
  /** RequestMirror */
  REQUEST_MIRROR = "RequestMirror",
  /** RequestRedirect */
  REQUEST_REDIRECT = "RequestRedirect",
  /** URLRewrite */
  URL_REWRITE = "URLRewrite",
  /** ExtensionRef */
  EXTENSION_REF = "ExtensionRef",
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewrite
 */
export interface HttpRouteV1Beta1SpecRulesFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during
   * forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewrite(obj: HttpRouteV1Beta1SpecRulesFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
 * headers.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders
 */
export interface HttpRouteV1Beta1SpecRulesMatchesHeaders {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, only the first
   * entry with an equivalent name MUST be considered for a match. Subsequent
   * entries with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   *
   * When a header is repeated in an HTTP request, it is
   * implementation-specific behavior as to how this is represented.
   * Generally, proxies should follow the guidance from the RFC:
   * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
   * processing a repeated header, with special handling for "Set-Cookie".
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the header.
   *
   *
   * Support: Core (Exact)
   *
   *
   * Support: Implementation-specific (RegularExpression)
   *
   *
   * Since RegularExpression HeaderMatchType has implementation-specific
   * conformance, implementations can support POSIX, PCRE or any other dialects
   * of regular expressions. Please read the implementation's documentation to
   * determine the supported dialect.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesMatchesHeadersType;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatchesHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatchesHeaders(obj: HttpRouteV1Beta1SpecRulesMatchesHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Method specifies HTTP method matcher.
 * When specified, this route will be matched only if the request has the
 * specified method.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesMethod
 */
export enum HttpRouteV1Beta1SpecRulesMatchesMethod {
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** DELETE */
  DELETE = "DELETE",
  /** CONNECT */
  CONNECT = "CONNECT",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** TRACE */
  TRACE = "TRACE",
  /** PATCH */
  PATCH = "PATCH",
}

/**
 * Path specifies a HTTP request path matcher. If this field is not
 * specified, a default prefix match on the "/" path is provided.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesPath
 */
export interface HttpRouteV1Beta1SpecRulesMatchesPath {
  /**
   * Type specifies how to match against the path Value.
   *
   *
   * Support: Core (Exact, PathPrefix)
   *
   *
   * Support: Implementation-specific (RegularExpression)
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesPath#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesMatchesPathType;

  /**
   * Value of the HTTP path to match against.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesPath#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatchesPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatchesPath(obj: HttpRouteV1Beta1SpecRulesMatchesPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
 * query parameters.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams
 */
export interface HttpRouteV1Beta1SpecRulesMatchesQueryParams {
  /**
   * Name is the name of the HTTP query param to be matched. This must be an
   * exact string match. (See
   * https://tools.ietf.org/html/rfc7230#section-2.7.3).
   *
   *
   * If multiple entries specify equivalent query param names, only the first
   * entry with an equivalent name MUST be considered for a match. Subsequent
   * entries with an equivalent query param name MUST be ignored.
   *
   *
   * If a query param is repeated in an HTTP request, the behavior is
   * purposely left undefined, since different data planes have different
   * capabilities. However, it is *recommended* that implementations should
   * match against the first value of the param if the data plane supports it,
   * as this behavior is expected in other load balancing contexts outside of
   * the Gateway API.
   *
   *
   * Users SHOULD NOT route traffic based on repeated query params to guard
   * themselves against potential differences in the implementations.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the query parameter.
   *
   *
   * Support: Extended (Exact)
   *
   *
   * Support: Implementation-specific (RegularExpression)
   *
   *
   * Since RegularExpression QueryParamMatchType has Implementation-specific
   * conformance, implementations can support POSIX, PCRE or any other
   * dialects of regular expressions. Please read the implementation's
   * documentation to determine the supported dialect.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesMatchesQueryParamsType;

  /**
   * Value is the value of HTTP query param to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatchesQueryParams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatchesQueryParams(obj: HttpRouteV1Beta1SpecRulesMatchesQueryParams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CookieConfig provides configuration settings that are specific
 * to cookie-based session persistence.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig
 */
export interface HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig {
  /**
   * LifetimeType specifies whether the cookie has a permanent or
   * session-based lifetime. A permanent cookie persists until its
   * specified expiry time, defined by the Expires or Max-Age cookie
   * attributes, while a session cookie is deleted when the current
   * session ends.
   *
   *
   * When set to "Permanent", AbsoluteTimeout indicates the
   * cookie's lifetime via the Expires or Max-Age cookie attributes
   * and is required.
   *
   *
   * When set to "Session", AbsoluteTimeout indicates the
   * absolute lifetime of the cookie tracked by the gateway and
   * is optional.
   *
   *
   * Support: Core for "Session" type
   *
   *
   * Support: Extended for "Permanent" type
   *
   * @schema HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig#lifetimeType
   */
  readonly lifetimeType?: HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfigLifetimeType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig(obj: HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lifetimeType': obj.lifetimeType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type defines the type of session persistence such as through
 * the use a header or cookie. Defaults to cookie based session
 * persistence.
 *
 *
 * Support: Core for "Cookie" type
 *
 *
 * Support: Extended for "Header" type
 *
 * @default cookie based session
 * @schema HttpRouteV1Beta1SpecRulesSessionPersistenceType
 */
export enum HttpRouteV1Beta1SpecRulesSessionPersistenceType {
  /** Cookie */
  COOKIE = "Cookie",
  /** Header */
  HEADER = "Header",
}

/**
 * ExtensionRef is an optional, implementation-specific extension to the
 * "filter" behavior.  For example, resource "myroutefilter" in group
 * "networking.example.net"). ExtensionRef MUST NOT be used for core and
 * extended filters.
 *
 *
 * This filter can be used multiple times within the same rule.
 *
 *
 * Support: Implementation-specific
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request
 * headers.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests.
 * Requests are sent to the specified destination, but responses from
 * that destination are ignored.
 *
 *
 * This filter can be used multiple times within the same rule. Note that
 * not all implementations will be able to support mirroring to multiple
 * backends.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   *
   *
   * Mirrored requests must be sent only to a single destination endpoint
   * within this BackendRef, irrespective of how many endpoints are present
   * within this BackendRef.
   *
   *
   * If the referent cannot be found, this BackendRef is invalid and must be
   * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
   * condition on the Route status is set to `status: False` and not configure
   * this backend in the underlying implementation.
   *
   *
   * If there is a cross-namespace reference to an *existing* object
   * that is not allowed by a ReferenceGrant, the controller must ensure the
   * "ResolvedRefs"  condition on the Route is set to `status: False`,
   * with the "RefNotPermitted" reason and not configure this backend in the
   * underlying implementation.
   *
   *
   * In either error case, the Message of the `ResolvedRefs` Condition
   * should be used to provide more detail about the problem.
   *
   *
   * Support: Extended for Kubernetes Service
   *
   *
   * Support: Implementation-specific for any other resource
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the
 * request with an HTTP redirection.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location`
   * header in the response.
   * When empty, the hostname in the `Host` header of the request is used.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request.
   * The modified path is then used to construct the `Location` header. When
   * empty, the request path is used as-is.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location`
   * header in the response.
   *
   *
   * If no port is specified, the redirect port MUST be derived using the
   * following rules:
   *
   *
   * * If redirect scheme is not-empty, the redirect port MUST be the well-known
   * port associated with the redirect scheme. Specifically "http" to port 80
   * and "https" to port 443. If the redirect scheme does not have a
   * well-known port, the listener port of the Gateway SHOULD be used.
   * * If redirect scheme is empty, the redirect port MUST be the Gateway
   * Listener port.
   *
   *
   * Implementations SHOULD NOT add the port number in the 'Location'
   * header in the following cases:
   *
   *
   * * A Location header that will use HTTP (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 80.
   * * A Location header that will use HTTPS (whether that is determined via
   * the Listener protocol or the Scheme field) _and_ use port 443.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in
   * the response. When empty, the scheme of the request is used.
   *
   *
   * Scheme redirects can affect the port of the redirect, for more information,
   * refer to the documentation for the port field of this filter.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectStatusCode;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResponseHeaderModifier defines a schema for a filter that modifies response
 * headers.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request
   * before the action. It appends to any existing values associated
   * with the header name.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * add:
   * - name: "my-header"
   * value: "bar,baz"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: foo,bar,baz
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier#add
   */
  readonly add?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The
   * value of Remove is a list of HTTP header names. Note that the header
   * names are case-insensitive (see
   * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header1: foo
   * my-header2: bar
   * my-header3: baz
   *
   *
   * Config:
   * remove: ["my-header1", "my-header3"]
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header2: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value)
   * before the action.
   *
   *
   * Input:
   * GET /foo HTTP/1.1
   * my-header: foo
   *
   *
   * Config:
   * set:
   * - name: "my-header"
   * value: "bar"
   *
   *
   * Output:
   * GET /foo HTTP/1.1
   * my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier#set
   */
  readonly set?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields,
 * types are classified into three conformance levels:
 *
 *
 * - Core: Filter types and their corresponding configuration defined by
 * "Support: Core" in this package, e.g. "RequestHeaderModifier". All
 * implementations must support core filters.
 *
 *
 * - Extended: Filter types and their corresponding configuration defined by
 * "Support: Extended" in this package, e.g. "RequestMirror". Implementers
 * are encouraged to support extended filters.
 *
 *
 * - Implementation-specific: Filters that are defined and supported by
 * specific vendors.
 * In the future, filters showing convergence in behavior across multiple
 * implementations will be considered for inclusion in extended or core
 * conformance levels. Filter-specific configuration for such filters
 * is specified using the ExtensionRef field. `Type` should be set to
 * "ExtensionRef" for custom filters.
 *
 *
 * Implementers are encouraged to define custom implementation types to
 * extend the core API with implementation-specific behavior.
 *
 *
 * If a reference to a custom filter type cannot be resolved, the filter
 * MUST NOT be skipped. Instead, requests that would have been processed by
 * that filter MUST receive a HTTP error response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersType
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = "RequestHeaderModifier",
  /** ResponseHeaderModifier */
  RESPONSE_HEADER_MODIFIER = "ResponseHeaderModifier",
  /** RequestMirror */
  REQUEST_MIRROR = "RequestMirror",
  /** RequestRedirect */
  REQUEST_REDIRECT = "RequestRedirect",
  /** URLRewrite */
  URL_REWRITE = "URLRewrite",
  /** ExtensionRef */
  EXTENSION_REF = "ExtensionRef",
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during
   * forwarding.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   *
   *
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd(obj: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet(obj: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 *
 *
 * Mirrored requests must be sent only to a single destination endpoint
 * within this BackendRef, irrespective of how many endpoints are present
 * within this BackendRef.
 *
 *
 * If the referent cannot be found, this BackendRef is invalid and must be
 * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
 * condition on the Route status is set to `status: False` and not configure
 * this backend in the underlying implementation.
 *
 *
 * If there is a cross-namespace reference to an *existing* object
 * that is not allowed by a ReferenceGrant, the controller must ensure the
 * "ResolvedRefs"  condition on the Route is set to `status: False`,
 * with the "RefNotPermitted" reason and not configure this backend in the
 * underlying implementation.
 *
 *
 * In either error case, the Message of the `ResolvedRefs` Condition
 * should be used to provide more detail about the problem.
 *
 *
 * Support: Extended for Kubernetes Service
 *
 *
 * Support: Implementation-specific for any other resource
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is the Kubernetes resource kind of the referent. For example
   * "Service".
   *
   *
   * Defaults to "Service" when not specified.
   *
   *
   * ExternalName services can refer to CNAME DNS records that may live
   * outside of the cluster and as such are difficult to reason about in
   * terms of conformance. They also may not be safe to forward to (see
   * CVE-2021-25740 for more information). Implementations SHOULD NOT
   * support ExternalName Services.
   *
   *
   * Support: Core (Services with a type other than ExternalName)
   *
   *
   * Support: Implementation-specific (Services with type ExternalName)
   *
   * @default Service" when not specified.
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local
   * namespace is inferred.
   *
   *
   * Note that when a namespace different than the local namespace is specified,
   * a ReferenceGrant object is required in the referent namespace to allow that
   * namespace's owner to accept the reference. See the ReferenceGrant
   * documentation for details.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource.
   * Port is required when the referent is a Kubernetes Service. In this
   * case, the port number is the service port number, not the target port.
   * For other resources, destination port might be derived from the referent
   * resource or this field.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef(obj: HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request.
 * The modified path is then used to construct the `Location` header. When
 * empty, the request path is used as-is.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath(obj: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in
 * the response. When empty, the scheme of the request is used.
 *
 *
 * Scheme redirects can affect the port of the redirect, for more information,
 * refer to the documentation for the port field of this filter.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectScheme
 */
export enum HttpRouteV1Beta1SpecRulesFiltersRequestRedirectScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * StatusCode is the HTTP status code to be used in response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectStatusCode
 */
export enum HttpRouteV1Beta1SpecRulesFiltersRequestRedirectStatusCode {
  /** 301 */
  VALUE_301 = 301,
  /** 302 */
  VALUE_302 = 302,
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd
 */
export interface HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd(obj: HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet
 */
export interface HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet(obj: HttpRouteV1Beta1SpecRulesFiltersResponseHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines a path rewrite.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath
 */
export interface HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath(obj: HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies how to match against the value of the header.
 *
 *
 * Support: Core (Exact)
 *
 *
 * Support: Implementation-specific (RegularExpression)
 *
 *
 * Since RegularExpression HeaderMatchType has implementation-specific
 * conformance, implementations can support POSIX, PCRE or any other dialects
 * of regular expressions. Please read the implementation's documentation to
 * determine the supported dialect.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesHeadersType
 */
export enum HttpRouteV1Beta1SpecRulesMatchesHeadersType {
  /** Exact */
  EXACT = "Exact",
  /** RegularExpression */
  REGULAR_EXPRESSION = "RegularExpression",
}

/**
 * Type specifies how to match against the path Value.
 *
 *
 * Support: Core (Exact, PathPrefix)
 *
 *
 * Support: Implementation-specific (RegularExpression)
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesPathType
 */
export enum HttpRouteV1Beta1SpecRulesMatchesPathType {
  /** Exact */
  EXACT = "Exact",
  /** PathPrefix */
  PATH_PREFIX = "PathPrefix",
  /** RegularExpression */
  REGULAR_EXPRESSION = "RegularExpression",
}

/**
 * Type specifies how to match against the value of the query parameter.
 *
 *
 * Support: Extended (Exact)
 *
 *
 * Support: Implementation-specific (RegularExpression)
 *
 *
 * Since RegularExpression QueryParamMatchType has Implementation-specific
 * conformance, implementations can support POSIX, PCRE or any other
 * dialects of regular expressions. Please read the implementation's
 * documentation to determine the supported dialect.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParamsType
 */
export enum HttpRouteV1Beta1SpecRulesMatchesQueryParamsType {
  /** Exact */
  EXACT = "Exact",
  /** RegularExpression */
  REGULAR_EXPRESSION = "RegularExpression",
}

/**
 * LifetimeType specifies whether the cookie has a permanent or
 * session-based lifetime. A permanent cookie persists until its
 * specified expiry time, defined by the Expires or Max-Age cookie
 * attributes, while a session cookie is deleted when the current
 * session ends.
 *
 *
 * When set to "Permanent", AbsoluteTimeout indicates the
 * cookie's lifetime via the Expires or Max-Age cookie attributes
 * and is required.
 *
 *
 * When set to "Session", AbsoluteTimeout indicates the
 * absolute lifetime of the cookie tracked by the gateway and
 * is optional.
 *
 *
 * Support: Core for "Session" type
 *
 *
 * Support: Extended for "Permanent" type
 *
 * @schema HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfigLifetimeType
 */
export enum HttpRouteV1Beta1SpecRulesSessionPersistenceCookieConfigLifetimeType {
  /** Permanent */
  PERMANENT = "Permanent",
  /** Session */
  SESSION = "Session",
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 *
 *
 * Mirrored requests must be sent only to a single destination endpoint
 * within this BackendRef, irrespective of how many endpoints are present
 * within this BackendRef.
 *
 *
 * If the referent cannot be found, this BackendRef is invalid and must be
 * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
 * condition on the Route status is set to `status: False` and not configure
 * this backend in the underlying implementation.
 *
 *
 * If there is a cross-namespace reference to an *existing* object
 * that is not allowed by a ReferenceGrant, the controller must ensure the
 * "ResolvedRefs"  condition on the Route is set to `status: False`,
 * with the "RefNotPermitted" reason and not configure this backend in the
 * underlying implementation.
 *
 *
 * In either error case, the Message of the `ResolvedRefs` Condition
 * should be used to provide more detail about the problem.
 *
 *
 * Support: Extended for Kubernetes Service
 *
 *
 * Support: Implementation-specific for any other resource
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "gateway.networking.k8s.io".
   * When unspecified or empty string, core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is the Kubernetes resource kind of the referent. For example
   * "Service".
   *
   *
   * Defaults to "Service" when not specified.
   *
   *
   * ExternalName services can refer to CNAME DNS records that may live
   * outside of the cluster and as such are difficult to reason about in
   * terms of conformance. They also may not be safe to forward to (see
   * CVE-2021-25740 for more information). Implementations SHOULD NOT
   * support ExternalName Services.
   *
   *
   * Support: Core (Services with a type other than ExternalName)
   *
   *
   * Support: Implementation-specific (Services with type ExternalName)
   *
   * @default Service" when not specified.
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local
   * namespace is inferred.
   *
   *
   * Note that when a namespace different than the local namespace is specified,
   * a ReferenceGrant object is required in the referent namespace to allow that
   * namespace's owner to accept the reference. See the ReferenceGrant
   * documentation for details.
   *
   *
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource.
   * Port is required when the referent is a Kubernetes Service. In this
   * case, the port number is the service port number, not the target port.
   * For other resources, destination port might be derived from the referent
   * resource or this field.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request.
 * The modified path is then used to construct the `Location` header. When
 * empty, the request path is used as-is.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in
 * the response. When empty, the scheme of the request is used.
 *
 *
 * Scheme redirects can affect the port of the redirect, for more information,
 * refer to the documentation for the port field of this filter.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectScheme
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectScheme {
  /** http */
  HTTP = "http",
  /** https */
  HTTPS = "https",
}

/**
 * StatusCode is the HTTP status code to be used in response.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 *
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectStatusCode
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectStatusCode {
  /** 301 */
  VALUE_301 = 301,
  /** 302 */
  VALUE_302 = 302,
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be
   * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   *
   *
   * If multiple entries specify equivalent header names, the first entry with
   * an equivalent name MUST be considered for a match. Subsequent entries
   * with an equivalent header name MUST be ignored. Due to the
   * case-insensitivity of header names, "foo" and "Foo" are considered
   * equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersResponseHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines a path rewrite.
 *
 *
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path
   * of a request during a rewrite or redirect.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix
   * match of a request during a rewrite or redirect. For example, a request
   * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
   * of "/xyz" would be modified to "/xyz/bar".
   *
   *
   * Note that this matches the behavior of the PathPrefix match type. This
   * matches full path elements. A path element refers to the list of labels
   * in the path split by the `/` separator. When specified, a trailing `/` is
   * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
   * match the prefix `/abc`, but the path `/abcd` would not.
   *
   *
   * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
   * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
   * the implementation setting the Accepted Condition for the Route to `status: False`.
   *
   *
   * Request Path | Prefix Match | Replace Prefix | Modified Path
   * -------------|--------------|----------------|----------
   * /foo/bar     | /foo         | /xyz           | /xyz/bar
   * /foo/bar     | /foo         | /xyz/          | /xyz/bar
   * /foo/bar     | /foo/        | /xyz           | /xyz/bar
   * /foo/bar     | /foo/        | /xyz/          | /xyz/bar
   * /foo         | /foo         | /xyz           | /xyz
   * /foo/        | /foo         | /xyz           | /xyz/
   * /foo/bar     | /foo         | <empty string> | /bar
   * /foo/        | /foo         | <empty string> | /
   * /foo         | /foo         | <empty string> | /
   * /foo/        | /foo         | /              | /
   * /foo         | /foo         | /              | /
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be
   * added in a future release of the API.
   *
   *
   * Note that values may be added to this enum, implementations
   * must ensure that unknown values will not cause a crash.
   *
   *
   * Unknown values here must result in the implementation setting the
   * Accepted Condition for the Route to `status: False`, with a
   * Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPathType
 */
export enum HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePathType
 */
export enum HttpRouteV1Beta1SpecRulesFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPathType
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

/**
 * Type defines the type of path modifier. Additional types may be
 * added in a future release of the API.
 *
 *
 * Note that values may be added to this enum, implementations
 * must ensure that unknown values will not cause a crash.
 *
 *
 * Unknown values here must result in the implementation setting the
 * Accepted Condition for the Route to `status: False`, with a
 * Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePathType
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = "ReplaceFullPath",
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = "ReplacePrefixMatch",
}

