// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/onmetal-dev/metal/cmd/app/urls"
)

func OnboardingPayment(nonce string, teamId string, stripeCustomerSessionClientSecret string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex flex-col items-center justify-start max-w-md gap-4 mx-auto\"><form id=\"payment-form\" class=\"flex flex-col items-center justify-center gap-4\"><div id=\"address-element\" class=\"w-full skeleton h-80\"></div><div id=\"payment-element\" class=\"w-full skeleton h-80\"></div><button id=\"submit\" class=\"btn btn-primary\" disabled>add payment method</button><div id=\"error-message\" class=\"text-error\"></div></form>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("scriptData", map[string]string{
			"customerSessionClientSecret": stripeCustomerSessionClientSecret,
			"key":                         "pk_test_51PLTflDAkR0SeGPZBoKim1zPKLPdCrrlsh8LG2sKcIHN66Ro55qIPFvG3Mx1mZYoMTW8FfQOu5dcIoB0QCskX1Qc00sEZJby2F",
			"urlPath":                     urls.OnboardingPayment{TeamId: teamId}.Render(),
		}).WithNonceFromString(nonce).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script nonce=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/app/templates/onboarding-payment.templ`, Line: 20, Col: 23}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">\n            const scriptData = JSON.parse(document.getElementById('scriptData').textContent);\n            const stripe = Stripe(scriptData.key);\n            const appearance = {\n                theme: \"night\",\n                variables: {\n                    fontFamily: \"ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace\",\n                    colorPrimary: \"#9FE88D\",\n                    colorSuccess: \"#62efbd\",\n                    colorWarning: \"#efd057\",\n                    colorText: \"#B2CCD6\",\n                    colorDanger: \"#ffae9b\",\n                    colorBackground: \"#2A303C\",\n                    borderRadius: '0px',\n                },\n            };\n\n            const elements = stripe.elements({\n                mode: 'setup',\n                currency: 'usd',\n                setupFutureUsage: 'off_session',\n                appearance: appearance,\n                customerSessionClientSecret: scriptData.customerSessionClientSecret,\n            });\n\n            const paymentElement = elements.create('payment');\n            paymentElement.on('ready', () => {\n                document.getElementById('payment-element').classList.remove('skeleton', 'h-80');\n                document.getElementById('submit').disabled = false;\n            })\n            paymentElement.mount('#payment-element');\n\n            const addressElement = elements.create('address', {\n                mode: 'billing',\n            });\n            addressElement.on('ready', () => {\n                document.getElementById('address-element').classList.remove('skeleton', 'h-80');\n            })\n            addressElement.mount('#address-element');\n\n            // see https://docs.stripe.com/payments/accept-a-payment-deferred?platform=web&type=setup&client=html#submit-the-setup\n            const form = document.getElementById('payment-form');\n            const submitBtn = document.getElementById('submit');\n\n            const handleError = (error) => {\n                const messageContainer = document.querySelector('#error-message');\n                messageContainer.textContent = error.message;\n                submitBtn.disabled = false;\n            };\n\n            form.addEventListener('submit', async (event) => {\n                // We don't want to let default form submission happen here,\n                // which would refresh the page.\n                event.preventDefault();\n                // Prevent multiple form submissions\n                if (submitBtn.disabled) {\n                    return;\n                }\n                // Disable form submission while loading\n                submitBtn.disabled = true;\n\n                // Trigger form validation and wallet collection\n                const {error: submitError} = await elements.submit();\n                if (submitError) {\n                    handleError(submitError);\n                    return;\n                }\n\n                // Create the SetupIntent and obtain clientSecret\n                const res = await fetch(scriptData.urlPath, {\n                    method: \"POST\",\n                });\n\n                const {client_secret: clientSecret} = await res.json();\n\n                // Confirm the SetupIntent using the details collected by the Payment Element\n                const {error} = await stripe.confirmSetup({\n                    elements,\n                    clientSecret,\n                    confirmParams: {\n                        return_url: `${window.location.protocol}//${window.location.hostname}${window.location.port ? ':' + window.location.port : ''}${scriptData.urlPath}/confirm`,\n                    },\n                });\n\n                if (error) {\n                    // This point is only reached if there's an immediate error when\n                    // confirming the setup. Show the error to your customer (for example, payment details incomplete)\n                    handleError(error);\n                } else {\n                    // Your customer is redirected to your `return_url`. For some payment\n                    // methods like iDEAL, your customer is redirected to an intermediate\n                    // site first to authorize the payment, then redirected to the `return_url`.\n                }\n            });\n\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
