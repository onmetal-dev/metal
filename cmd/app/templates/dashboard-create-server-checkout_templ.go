// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func CreateServerCheckout(nonce string, stripePublishableKey string, stripeCheckoutSessionClientSecret string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex flex-col gap-4\"><div class=\"flex flex-col items-center justify-start max-w-md gap-4 mx-auto\"><div id=\"checkout\" class=\"w-full skeleton h-80\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("scriptData", map[string]string{
			"stripeCheckoutSessionClientSecret": stripeCheckoutSessionClientSecret,
			"stripePublishableKey":              stripePublishableKey,
		}).WithNonceFromString(nonce).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script nonce=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/app/templates/dashboard-create-server-checkout.templ`, Line: 12, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">\n            const scriptData = JSON.parse(document.getElementById('scriptData').textContent);\n            const stripe = Stripe(scriptData.stripePublishableKey);\n            initialize();\n            async function initialize() {\n                const fetchClientSecret = async () => {\n                    return scriptData.stripeCheckoutSessionClientSecret;\n                }\n                const checkout = await stripe.initEmbeddedCheckout({\n                    fetchClientSecret,\n                });\n                // make sure the checkout iframe is correctly enclosed in the div\n                document.getElementById('checkout').classList.remove('skeleton', 'h-80');\n                document.getElementById('checkout').classList.add('h-fit');\n                checkout.mount('#checkout');\n            }\n        </script></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

// templ CreateServerCheckout(nonce string, stripePublishableKey string, stripeSubscriptionPaymentIntentClientSecret string, returnUrl string) {
// 	<div class="flex flex-col items-center justify-start max-w-md gap-4 mx-auto">
// 		<form id="payment-form" class="flex flex-col items-center justify-center gap-4">
// 			<div id="payment-element" class="w-full skeleton h-80"></div>
// 			<button id="submit" class="btn btn-primary" disabled>pay</button>
// 			<div id="error-message" class="text-error"></div>
// 		</form>
// 		@templ.JSONScript("scriptData", map[string]string{
// 			"stripeSubscriptionPaymentIntentClientSecret": stripeSubscriptionPaymentIntentClientSecret,
// 			"stripePublishableKey":                        stripePublishableKey,
// 			"returnUrl":                                   returnUrl,
// 		})
// 		// see https://docs.stripe.com/checkout/embedded/quickstart
// 		<script nonce={ nonce }>
//             const scriptData = JSON.parse(document.getElementById('scriptData').textContent);
//             const stripe = Stripe(scriptData.stripePublishableKey);
//             const appearance = {
//                 theme: "night",
//                 variables: {
//                     fontFamily: "ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace",
//                     colorPrimary: "#9FE88D",
//                     colorSuccess: "#62efbd",
//                     colorWarning: "#efd057",
//                     colorText: "#B2CCD6",
//                     colorDanger: "#ffae9b",
//                     colorBackground: "#2A303C",
//                     borderRadius: '0px',
//                 },
//             };
//             const elements = stripe.elements({
//                 clientSecret: scriptData.stripeSubscriptionPaymentIntentClientSecret,
//                 appearance: appearance,
//             });
//             const paymentElement = elements.create('payment');
//             paymentElement.on('ready', () => {
//                 document.getElementById('payment-element').classList.remove('skeleton', 'h-80');
//                 document.getElementById('submit').disabled = false;
//             })
//             paymentElement.mount('#payment-element');

//             const form = document.getElementById('payment-form');
//             form.addEventListener('submit', async (event) => {
//                 event.preventDefault();

//                 const {error} = await stripe.confirmPayment({
//                     //`Elements` instance that was used to create the Payment Element
//                     elements,
//                     confirmParams: {
//                         return_url: scriptData.returnUrl,
//                     }
//                 });

//	                if (error) {
//	                    // This point will only be reached if there is an immediate error when
//	                    // confirming the payment. Show error to your customer (for example, payment
//	                    // details incomplete)
//	                    const messageContainer = document.querySelector('#error-message');
//	                    messageContainer.textContent = error.message;
//	                } else {
//	                    // Your customer will be redirected to your `return_url`. For some payment
//	                    // methods like iDEAL, your customer will be redirected to an intermediate
//	                    // site first to authorize the payment, then redirected to the `return_url`.
//	                }
//	            });
//	        </script>
//		</div>
//	}
var _ = templruntime.GeneratedTemplate
