package templates

import (
	"fmt"
	"github.com/onmetal-dev/metal/lib/form"
	"github.com/onmetal-dev/metal/lib/store"
)

type CreateAppFormData struct {
	AppName        string  `validate:"required,max=63,lowercasealphanumhyphen"`
	ContainerImage string  `validate:"required"`
	Replicas       int     `validate:"required,min=1"`
	ContainerPort  int     `validate:"required,min=1,max=65535"`
	CpuLimit       float64 `validate:"required,min=0.1"`
	MemoryLimit    int     `validate:"required,min=32"`
	EnvVars        string  `validate:"omitempty,dotenvformat"`
	CellId         string  `validate:"required,startswith=cell_"`
}

func inputClass(error error) string {
	return cls("max-w-xs input input-xs", error, "input-error")
}

func textareaClass(error error) string {
	return cls("max-w-xs textarea textarea-xs", error, "textarea-error")
}

func selectClass(error error) string {
	return cls("w-full max-w-xs py-0 select select-xs", error, "select-error")
}

templ CreateAppForm(teamId string, cells []store.Cell, data CreateAppFormData, errors form.FieldErrors, submitError error) {
	<form
		novalidate
		hx-post={ fmt.Sprintf("/dashboard/%s/apps/new", teamId) }
		hx-disabled-elt="find button[type='submit']"
		hx-trigger="submit"
		hx-indicator="find .loading"
		hx-swap="outerHTML"
		class="grid grid-cols-[auto,1fr] gap-2 text-xs mt-4"
	>
		<label class="flex items-center justify-end">app name</label>
		<div class="flex items-center justify-start gap-2">
			<input
				type="text"
				name="AppName"
				class={ inputClass(errors.Get("AppName")) }
				placeholder="my-app"
				value={ form.InputValue(data.AppName) }
				required
			/>
			if errors.Get("AppName") != nil {
				<div class="text-error">{ errors.Get("AppName").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">container image</label>
		<div class="flex items-center justify-start gap-2">
			<input type="text" name="ContainerImage" class={ inputClass(errors.Get("ContainerImage")) } placeholder="nginx:latest" value={ form.InputValue(data.ContainerImage) } required/>
			if errors.Get("ContainerImage") != nil {
				<div class="text-error">{ errors.Get("ContainerImage").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">replicas</label>
		<div class="flex items-center justify-start gap-2">
			<input type="number" name="Replicas" class={ inputClass(errors.Get("Replicas")) } placeholder="1" min="1" value={ form.InputValue(data.Replicas) } required/>
			if errors.Get("Replicas") != nil {
				<div class="text-error">{ errors.Get("Replicas").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">container port</label>
		<div class="flex items-center justify-start gap-2">
			<input type="number" name="ContainerPort" class={ inputClass(errors.Get("ContainerPort")) } placeholder="80" min="1" max="65535" value={ form.InputValue(data.ContainerPort) } required/>
			if errors.Get("ContainerPort") != nil {
				<div class="text-error">{ errors.Get("ContainerPort").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">cpu limit (cores)</label>
		<div class="flex items-center justify-start gap-2">
			<input type="number" name="CpuLimit" class={ inputClass(errors.Get("CpuLimit")) } placeholder="0.5" step="0.1" min="0.1" value={ form.InputValue(data.CpuLimit) } required/>
			if errors.Get("CpuLimit") != nil {
				<div class="text-error">{ errors.Get("CpuLimit").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">memory limit (Mi)</label>
		<div class="flex items-center justify-start gap-2">
			<input type="number" name="MemoryLimit" class={ inputClass(errors.Get("MemoryLimit")) } placeholder="256" step="32" min="32" value={ form.InputValue(data.MemoryLimit) } required/>
			if errors.Get("MemoryLimit") != nil {
				<div class="text-error">{ errors.Get("MemoryLimit").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">environment variables</label>
		<div class="flex items-center justify-start gap-2">
			<textarea
				name="EnvVars"
				class={ textareaClass(errors.Get("EnvVars")) }
				placeholder="KEY=value
ANOTHER_KEY=another_value"
			>{ form.InputValue(data.EnvVars) }</textarea>
			if errors.Get("EnvVars") != nil {
				<div class="text-error">{ errors.Get("EnvVars").Error() }</div>
			}
		</div>
		<label class="flex items-center justify-end">cell</label>
		<div class="flex items-center justify-start gap-2">
			<select name="CellId" class={ selectClass(errors.Get("CellId")) } required>
				if len(cells) > 0 {
					<option value={ cells[0].Id } selected>{ cells[0].Name }</option>
					for _, cell := range cells[1:] {
						<option value={ cell.Id }>{ cell.Name }</option>
					}
				} else {
					<option disabled selected>No cells available, create one first</option>
				}
			</select>
			if errors.Get("CellId") != nil {
				<div class="text-error">{ errors.Get("CellId").Error() }</div>
			}
		</div>
		<div></div>
		<div class="flex items-center justify-start gap-2">
			<button type="submit" class="btn btn-primary btn-sm">Create App</button>
			<span class="htmx-indicator loading loading-ring loading-sm"></span>
		</div>
		<div></div>
		if submitError != nil {
			<div class="text-error">{ submitError.Error() }</div>
		}
	</form>
}

templ CreateApp(teamId string, cells []store.Cell, data CreateAppFormData, errors form.FieldErrors, submitError error) {
	<div>
		@CreateAppForm(teamId, cells, data, errors, submitError)
	</div>
}
