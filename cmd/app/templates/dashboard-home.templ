package templates

import (
	"fmt"
	"github.com/onmetal-dev/metal/cmd/app/middleware"
    "github.com/onmetal-dev/metal/cmd/app/urls"
	"github.com/onmetal-dev/metal/lib/cellprovider"
	"github.com/onmetal-dev/metal/lib/store"
)

const TimeFormat = "Jan 02 15:04:05"

templ party() {
	<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-party-popper"><path d="M5.8 11.3 2 22l10.7-3.79"></path><path d="M4 3h.01"></path><path d="M22 8h.01"></path><path d="M15 2h.01"></path><path d="M22 20h.01"></path><path d="m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10"></path><path d="m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17"></path><path d="m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7"></path><path d="M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z"></path></svg>
}

type TabName string

const (
	TabNameHome      TabName = "home"
	TabNameBuyServer TabName = "buy server"
	TabNameCreateApp TabName = "create app"
)

type Tab struct {
	Name TabName
	Href string
}

func dashboardTabs(teamId string, envId string) []Tab {
	return []Tab{
		{Name: TabNameHome, Href: urls.Home{TeamId: teamId, EnvName: envId}.Render()},
		{Name: TabNameBuyServer, Href: urls.NewServer{TeamId: teamId}.Render()},
		{Name: TabNameCreateApp, Href: urls.NewApp{TeamId: teamId}.Render()},
	}
}

type DashboardState struct {
	User              store.User
	Teams         []store.Team
	ActiveTeam        store.Team
    Envs []store.Env
	ActiveEnv         *store.Env
	ActiveTabName     TabName
	AdditionalScripts []ScriptTag
}

func boolToString(value bool) string {
	if value {
		return "true"
	}
	return "false"
}

func activeEnvNameOrSentinel(env *store.Env) string {
	if env == nil {
		return urls.DefaultEnvSentinel
	}
	return env.Name
}

templ dashboardNav(state DashboardState) {
	<nav class="container sticky top-0 z-10 backdrop-blur-sm">
		<div class="p-0 navbar bg-base">
			<div class="navbar-start min-w-fit">
				@logoWithText()
				<ul class="flex px-1 ml-2 menu menu-horizontal">
					for _, tab := range dashboardTabs(state.ActiveTeam.Id, activeEnvNameOrSentinel(state.ActiveEnv)) {
						if tab.Name == state.ActiveTabName {
							<li><a class="font-bold border-b-2 border-primary" href={ templ.SafeURL(tab.Href) }>{ string(tab.Name) }</a></li>
						} else {
							<li><a class="border-b-2 border-transparent hover:border-primary/50" href={ templ.SafeURL(tab.Href) }>{ string(tab.Name) }</a></li>
						}
					}
				</ul>
                <ul class="px-1 pt-2 menu menu-horizontal">
                    <li>
                        <details>
                            <summary>{ state.ActiveTeam.Name }</summary>
                            <ul>
                                <li><a>settings</a></li>
                                if len(state.Teams) > 1 {
                                <li>
                                    <h2 class="menu-title">switch</h2>
                                    <ul>
                                        for _, team := range state.Teams {
                                        <li><a href={ templ.SafeURL(urls.Home{TeamId: team.Id, EnvName: "x" }.Render()) }>{ team.Name }</a>
                                        </li>
                                        }
                                    </ul>
                                </li>
                                <li><a>create team</a></li>
                                }
                            </ul>
                        </details>
                    </li>
                    if state.ActiveEnv != nil {
                        <li>
                            <details>
                                <summary>{ state.ActiveEnv.Name }</summary>
                                <ul>
                                    for _, env := range state.Envs {
                                    <li><a disabled={boolToString(env.Id==state.ActiveEnv.Id)} href={ templ.SafeURL(urls.Home{TeamId:
                                            state.ActiveTeam.Id, EnvName: env.Name}.Render()) }>{env.Name}</a></li>
                                    }
                                </ul>
                            </details>
                        </li>
                    }
                </ul>
			</div>
            <div class="flex navbar-center"></div>
			<div class="navbar-end">
				<ul class="px-1 menu menu-horizontal">
					<li>
						<details>
							<summary>{ state.User.Email }</summary>
							<ul class="p-2 rounded-t-none bg-base-100">
								<li><a>settings</a></li>
								<li><a hx-target="body" hx-swap="innerHTML" hx-post={ urls.Logout.Render() }>logout</a></li>
							</ul>
						</details>
					</li>
				</ul>
			</div>
		</div>
	</nav>
}

templ DashboardLayout(state DashboardState, contents templ.Component) {
	@header("dashboard | "+string(state.ActiveTabName), state.AdditionalScripts...)
	<body class="flex flex-col h-full" data-theme="dark" hx-boost="true">
		@dashboardNav(state)
		<main class="container flex-1">
			@contents
		</main>
		@footer()
	</body>
}

templ flashes(flashes []string) {
	for _, flash := range flashes {
		<div class="z-50 toast">
			<div role="alert" class="text-xs alert alert-success">
				<span>{ flash }</span>
			</div>
		</div>
	}
}

templ DashboardHomeNoServers(teamId string) {
	<div>
		<div role="alert" class="alert alert-success">
			@party()
			<span>welcome! to get started, launch a <a href={ templ.SafeURL(urls.NewServer{TeamId: teamId}.Render()) } class="link">server</a></span>
		</div>
		@flashes(middleware.GetFlashes(ctx))
		<div class="flex flex-col items-center justify-start w-full h-full gap-4 mt-20">
			<p>there's nothing to see here... yet</p>
			<span class="loading loading-ring loading-sm"></span>
		</div>
	</div>
}

func cellById(cells []store.Cell, id string) *store.Cell {
	for _, cell := range cells {
		if cell.Id == id {
			return &cell
		}
	}
	return nil
}

func serverStatById(serverStats []cellprovider.ServerStats, id string) *cellprovider.ServerStats {
	for _, stat := range serverStats {
		if stat.ServerId == id {
			return &stat
		}
	}
	return nil
}

func colorNameForValue(colors []string, thresholds []float64, value float64) string {
	if len(colors) == 0 || len(thresholds) == 0 || len(colors) != len(thresholds)+1 {
		return ""
	}
	for i, threshold := range thresholds {
		if value < threshold {
			return colors[i]
		}
	}
	return colors[len(colors)-1]
}

func cssColorClassForUtilization(utilization float64) string {
	return colorNameForValue([]string{"text-success", "text-warning", "text-error"}, []float64{0.5, 0.8}, utilization)
}

func humanizePercent(value float64) string {
	return fmt.Sprintf("%.2f%%", value*100)
}

func totalResourcesForApp(deployments []store.Deployment, app store.App) (float64, int) {
	cpu := 0.0
	mem := 0
	for _, deployment := range deployments {
		if deployment.AppId == app.Id && deployment.Status == store.DeploymentStatusRunning {
			resources := deployment.AppSettings.Resources.Data()
			replicas := deployment.Replicas
			cpu += resources.Requests.CpuCores * float64(replicas)
			mem += resources.Requests.MemoryMiB * replicas
		}
	}
	return cpu, mem
}

func ServerStatsCpuSseEventName(serverId string) string {
	return fmt.Sprintf("serverstats-cpu-%s", serverId)
}

func ServerStatsMemSseEventName(serverId string) string {
	return fmt.Sprintf("serverstats-mem-%s", serverId)
}

templ ServerStatsCpu(stats *cellprovider.ServerStats) {
	if (stats == nil) {
		<span class="text-bold text-success">-</span>
	} else {
		<span class={ "text-bold", cssColorClassForUtilization(stats.CpuUtilization) }>{ humanizePercent(stats.CpuUtilization) }</span>
	}
}

templ ServerStatsMem(stats *cellprovider.ServerStats) {
	if (stats == nil) {
		<span class="text-bold text-success">-</span>
	} else {
		<span class={ "text-bold", cssColorClassForUtilization(stats.MemoryUtilization) }>{ humanizePercent(stats.MemoryUtilization) }</span>
	}
}

templ DashboardHome(teamId string, envName string, servers []store.Server, cells []store.Cell, deployments []store.Deployment, apps []store.App) {
	<div hx-ext="sse" sse-connect={ urls.HomeSse{TeamId: teamId, EnvName: envName}.Render() }>
		@flashes(middleware.GetFlashes(ctx))
		<div class="flex flex-col items-center justify-start w-full h-full gap-4">
            if (len(apps) > 0) {
                <div class="divider">apps</div>
                <table class="table table-xs" id="apps-table">
                    <thead>
                        <tr>
                            <th>name</th>
                            <th>id</th>
                            <th>total cpu (cores)</th>
                            <th>total memory (mib)</th>
                            <th>created at</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        for _, app := range apps {
                        <tr class="cursor-pointer hover"
                            hx-get={ urls.EnvApp{TeamId: teamId, AppId: app.Id, EnvName: envName}.Render() }
                            hx-target="body" 
                            hx-swap="innerHTML show:window:top"
                            hx-push-url={ urls.EnvApp{TeamId: teamId, AppId: app.Id, EnvName: envName}.Render() }>
                            <td>{ app.Name }</td>
                            <td>{ app.Id }</td>
                            if cpu, mem := totalResourcesForApp(deployments, app); true {
                                <td>{ fmt.Sprintf("%.2f", cpu) }</td>
                                <td>{ fmt.Sprintf("%d", mem) }</td>
                            }
                            <td class="whitespace-nowrap">{ app.CreatedAt.Format(TimeFormat) }</td>
                            <td>
                                <ul class="p-0 menu menu-horizontal menu-xs rounded-box">
                                    <li>
                                        <a class="tooltip" data-tip="Delete">
                                            <button hx-delete={ urls.App{TeamId: teamId, AppId: app.Id}.Render() }
                                                hx-confirm="Are you sure you want to delete this app?" class="w-4 h-4">
                                                @iconTrash()
                                            </button>
                                        </a>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            }
			<div class="divider">servers</div>
			<table class="table table-xs" id="servers-table">
				<thead>
					<tr>
						<th>id</th>
						<th>provider</th>
						<th>offering</th>
						<th>location</th>
						<th>status</th>
						<th>created at</th>
						<th>public ipv4</th>
						<th>cpu</th>
						<th>mem</th>
						<th>
							<div class="flex flex-row gap-1">
								<span>cell</span>
								<span class="w-3 h-3 tooltip tooltip-top before:text-xs before:content-[attr(data-tip)]" data-tip="a cell is a group of servers that can be used as a deployment target">
									@iconInfo()
								</span>
							</div>
						</th>
					</tr>
				</thead>
				<tbody>
					for _, server := range servers {
						<tr>
							<td>{ server.Id }</td>
							<td>
								{ server.ProviderSlug }
							</td>
							<td>{ server.OfferingId }</td>
							<td>{ server.LocationId }</td>
							<td>{ string(server.Status) }</td>
							<td class="whitespace-nowrap">{ server.CreatedAt.Format(TimeFormat) }</td>
							<td>
								if server.PublicIpv4 != nil {
									{ *server.PublicIpv4 }
								} else {
									(none)
								}
							</td>
							<td sse-swap={ ServerStatsCpuSseEventName(server.Id) } class="min-w-16">
								@ServerStatsCpu(nil)
							</td>
							<td sse-swap={ ServerStatsMemSseEventName(server.Id) } class="min-w-16">
								@ServerStatsMem(nil)
							</td>
							if server.CellId != nil {
								<td>{ cellById(cells, *server.CellId).Name }</td>
							} else {
								<td>(none)</td>
							}
						</tr>
					}
				</tbody>
			</table>
			if (len(deployments) > 0) {
				<div class="divider">deployments</div>
				<table class="table table-xs" id="deployments-table">
					<thead>
						<tr>
							<th>id</th>
							<th>app</th>
							<th>type</th>
							<th>cpu (cores)</th>
							<th>memory (mib)</th>
							<th>replicas</th>
							<th>created at</th>
                            <th>status</th>
                            <th>status reason</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						for _, deployment := range deployments {
							<tr>
								<td>{ fmt.Sprintf("%d", deployment.Id) }</td>
								<td class="whitespace-nowrap">{ deployment.App.Name }</td>
								<td>{ string(deployment.Type) }</td>
								if resources := deployment.AppSettings.Resources.Data(); true {
									<td>{ fmt.Sprintf("%.2f", resources.Requests.CpuCores) }</td>
									<td>{ fmt.Sprintf("%d", resources.Requests.MemoryMiB) }</td>
								}
								<td>{ fmt.Sprintf("%d", deployment.Replicas) }</td>
								<td class="whitespace-nowrap">{ deployment.CreatedAt.Format(TimeFormat) }</td>
								<td>{ string(deployment.Status) }</td>
								<td>{ string(deployment.StatusReason) }</td>
								<td>
									<ul class="p-0 menu menu-horizontal menu-xs rounded-box">
										<li>
											<a class="tooltip" data-tip="Logs" href={ templ.SafeURL(urls.DeploymentLogs{TeamId: teamId, AppId: deployment.AppId, EnvId: deployment.EnvId, DeploymentId: deployment.Id}.Render()) }>
												<button class="w-4 h-4">
													@iconLogs()
												</button>
											</a>
										</li>
									</ul>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
        </div>
	</div>
}
