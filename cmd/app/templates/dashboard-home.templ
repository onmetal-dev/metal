package templates

import (
	"fmt"
	"github.com/onmetal-dev/metal/cmd/app/middleware"
	"github.com/onmetal-dev/metal/lib/cellprovider"
	"github.com/onmetal-dev/metal/lib/store"
	"time"
)

templ party() {
	<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-party-popper"><path d="M5.8 11.3 2 22l10.7-3.79"></path><path d="M4 3h.01"></path><path d="M22 8h.01"></path><path d="M15 2h.01"></path><path d="M22 20h.01"></path><path d="m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10"></path><path d="m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17"></path><path d="m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7"></path><path d="M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z"></path></svg>
}

type TabName string

const (
	TabNameHome         TabName = "home"
	TabNameCreateServer TabName = "create server"
)

type Tab struct {
	Name TabName
	Href string
}

func dashboardTabs(teamId string) []Tab {
	return []Tab{
		{Name: TabNameHome, Href: fmt.Sprintf("/dashboard/%s", teamId)},
		{Name: TabNameCreateServer, Href: fmt.Sprintf("/dashboard/%s/servers/new", teamId)},
	}
}

type DashboardState struct {
	User              store.User
	UserTeams         []store.Team
	ActiveTeam        store.Team
	ActiveTabName     TabName
	AdditionalScripts []ScriptTag
}

templ dashboardNav(state DashboardState) {
	<nav class="container sticky top-0 z-50 backdrop-blur-sm">
		<div class="p-0 navbar bg-base">
			<div class="flex-1">
				@logoWithText()
				<div role="tablist" class="pl-4 tabs">
					for _, tab := range dashboardTabs(state.ActiveTeam.Id) {
						if tab.Name == state.ActiveTabName {
							<a role="tab" class="font-bold border-b-2 tab border-primary" href={ templ.SafeURL(tab.Href) }>{ string(tab.Name) }</a>
						} else {
							<a role="tab" class="tab" href={ templ.SafeURL(tab.Href) }>{ string(tab.Name) }</a>
						}
					}
				</div>
			</div>
			<div class="flex-none">
				<ul class="px-1 menu menu-horizontal">
					<li>
						<details>
							<summary>{ state.ActiveTeam.Name }</summary>
							<ul>
								<li><a href={ templ.SafeURL("/dashboard/" + state.ActiveTeam.Id) }>home</a></li>
								<li><a>settings</a></li>
								if len(state.UserTeams) > 0 {
									<li>
										<h2 class="menu-title">switch</h2>
										<ul>
											for _, team := range state.UserTeams {
												<li><a href={ templ.SafeURL("/dashboard/" + team.Id) }>{ team.Name }</a></li>
											}
										</ul>
									</li>
									<li><a>create team</a></li>
								}
							</ul>
						</details>
					</li>
					<li>
						<details>
							<summary>{ state.User.Email }</summary>
							<ul class="p-2 rounded-t-none bg-base-100">
								<li><a>settings</a></li>
								<li><a hx-target="body" hx-swap="innerHTML" hx-post="/logout">logout</a></li>
							</ul>
						</details>
					</li>
				</ul>
			</div>
		</div>
	</nav>
}

templ DashboardLayout(state DashboardState, contents templ.Component) {
	@header("dashboard | "+string(state.ActiveTabName), state.AdditionalScripts...)
	<body class="flex flex-col h-full" data-theme="dark" hx-boost="true">
		@dashboardNav(state)
		<main class="container flex-1">
			@contents
		</main>
		@footer()
	</body>
}

templ info() {
	<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
}

templ flashes(flashes []string) {
	for _, flash := range flashes {
		<div role="alert" class="alert alert-success">
			<span>{ flash }</span>
		</div>
	}
}

templ DashboardHomeNoServers(teamId string) {
	<div>
		<div role="alert" class="alert alert-success">
			@party()
			<span>welcome! to get started, launch a <a href={ templ.SafeURL("/dashboard/" + teamId + "/servers/new") } class="link">server</a></span>
		</div>
		@flashes(middleware.GetFlashes(ctx))
		<div class="flex flex-col items-center justify-start w-full h-full gap-4 mt-20">
			<p>there's nothing to see here... yet</p>
			<span class="loading loading-ring loading-sm"></span>
		</div>
	</div>
}

func cellById(cells []store.Cell, id string) *store.Cell {
	for _, cell := range cells {
		if cell.Id == id {
			return &cell
		}
	}
	return nil
}

func colorNameForValue(colors []string, thresholds []float64, value float64) string {
	if len(colors) == 0 || len(thresholds) == 0 || len(colors) != len(thresholds)+1 {
		return ""
	}
	for i, threshold := range thresholds {
		if value < threshold {
			return colors[i]
		}
	}
	return colors[len(colors)-1]
}

func cssColorClassForUtilization(utilization float64) string {
	return colorNameForValue([]string{"text-success", "text-warning", "text-error"}, []float64{0.5, 0.8}, utilization)
}

func humanizePercent(value float64) string {
	return fmt.Sprintf("%.2f%%", value*100)
}

templ DashboardHome(teamId string, servers []store.Server, cells []store.Cell, serverStats []cellprovider.ServerStats) {
	<div>
		@flashes(middleware.GetFlashes(ctx))
		<div class="flex flex-col items-center justify-start w-full h-full gap-4 mt-20">
			<table class="table table-xs" id="servers-table" hx-trigger="every 30s [document.visibilityState=='visible']" hx-get={ "/dashboard/" + teamId } hx-swap="outerHTML" hx-select="#servers-table">
				<thead>
					<tr>
						<th>id</th>
						<th>provider</th>
						<th>offering</th>
						<th>location</th>
						<th>status</th>
						<th>created at</th>
						<th>public ipv4</th>
						<th>cpu</th>
						<th>mem</th>
						<th>
							<div class="flex flex-row gap-1">
								<span>cell</span>
								<span class="w-3 h-3 tooltip tooltip-top before:text-xs before:content-[attr(data-tip)]" data-tip="a cell is a group of servers that can be used as a deployment target">
									@info()
								</span>
							</div>
						</th>
					</tr>
				</thead>
				<tbody>
					for i, server := range servers {
						<tr>
							<td>{ server.Id }</td>
							<td>
								{ server.ProviderSlug }
							</td>
							<td>{ server.OfferingId }</td>
							<td>{ server.LocationId }</td>
							<td>{ string(server.Status) }</td>
							<td>{ server.CreatedAt.Format(time.RFC3339) }</td>
							<td>
								if server.PublicIpv4 != nil {
									{ *server.PublicIpv4 }
								} else {
									(none)
								}
							</td>
							<td class={ "text-bold", cssColorClassForUtilization(serverStats[i].CpuUtilization) }>{ humanizePercent(serverStats[i].CpuUtilization) }</td>
							<td class={ "text-bold", cssColorClassForUtilization(serverStats[i].MemoryUtilization) }>{ humanizePercent(serverStats[i].MemoryUtilization) }</td>
							if server.CellId != nil {
								<td>{ cellById(cells, *server.CellId).Name }</td>
							} else {
								<td>(none)</td>
							}
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}
