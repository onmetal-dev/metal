// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// App defines model for App.
type App struct {
	CreatedAt time.Time `json:"created_at"`

	// CreatorId A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	CreatorId Id `json:"creator_id"`

	// Id A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	Id   Id     `json:"id"`
	Name string `json:"name"`

	// TeamId A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	TeamId    Id        `json:"team_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Apps defines model for Apps.
type Apps = []App

// Env defines model for Env.
type Env struct {
	CreatedAt time.Time `json:"created_at"`

	// Id A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	Id        Id        `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Envs defines model for Envs.
type Envs = []Env

// Error defines model for Error.
type Error struct {
	Code  *string `json:"code,omitempty"`
	Error string  `json:"error"`
}

// Id A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
type Id = string

// UpLog defines model for UpLog.
type UpLog struct {
	// Message Content of the log.
	Message *string `json:"message,omitempty"`

	// Time Timestamp of the log.
	Time *time.Time `json:"time,omitempty"`
}

// WhoAmI defines model for WhoAmI.
type WhoAmI struct {
	CreatedAt time.Time `json:"created_at"`

	// TeamId A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	TeamId   Id     `json:"team_id"`
	TeamName string `json:"team_name"`

	// TokenId A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	TokenId Id `json:"token_id"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// CreateAppJSONBody defines parameters for CreateApp.
type CreateAppJSONBody struct {
	Name string `json:"name"`
}

// CreateEnvJSONBody defines parameters for CreateEnv.
type CreateEnvJSONBody struct {
	Name string `json:"name"`
}

// UpMultipartBody defines parameters for Up.
type UpMultipartBody struct {
	// AppId A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	AppId   Id                 `json:"app_id"`
	Archive openapi_types.File `json:"archive"`

	// EnvId A string with a prefix, underscore, and 26 alphanumeric characters (type ID)
	EnvId Id `json:"env_id"`
}

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody CreateAppJSONBody

// CreateEnvJSONRequestBody defines body for CreateEnv for application/json ContentType.
type CreateEnvJSONRequestBody CreateEnvJSONBody

// UpMultipartRequestBody defines body for Up for multipart/form-data ContentType.
type UpMultipartRequestBody UpMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApps request
	GetApps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApp request
	DeleteApp(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApp request
	GetApp(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppWithBody request with any body
	CreateAppWithBody(ctx context.Context, appId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApp(ctx context.Context, appId Id, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvs request
	GetEnvs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnv request
	DeleteEnv(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnv request
	GetEnv(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvWithBody request with any body
	CreateEnvWithBody(ctx context.Context, envId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnv(ctx context.Context, envId Id, body CreateEnvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpWithBody request with any body
	UpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WhoAmI request
	WhoAmI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApp(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApp(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppWithBody(ctx context.Context, appId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApp(ctx context.Context, appId Id, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnv(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvRequest(c.Server, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnv(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvRequest(c.Server, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvWithBody(ctx context.Context, envId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvRequestWithBody(c.Server, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnv(ctx context.Context, envId Id, body CreateEnvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvRequest(c.Server, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WhoAmI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWhoAmIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAppsRequest generates requests for GetApps
func NewGetAppsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAppRequest generates requests for DeleteApp
func NewDeleteAppRequest(server string, appId Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppRequest generates requests for GetApp
func NewGetAppRequest(server string, appId Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAppRequest calls the generic CreateApp builder with application/json body
func NewCreateAppRequest(server string, appId Id, body CreateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewCreateAppRequestWithBody generates requests for CreateApp with any type of body
func NewCreateAppRequestWithBody(server string, appId Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvsRequest generates requests for GetEnvs
func NewGetEnvsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/envs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEnvRequest generates requests for DeleteEnv
func NewDeleteEnvRequest(server string, envId Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/envs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvRequest generates requests for GetEnv
func NewGetEnvRequest(server string, envId Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/envs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvRequest calls the generic CreateEnv builder with application/json body
func NewCreateEnvRequest(server string, envId Id, body CreateEnvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvRequestWithBody(server, envId, "application/json", bodyReader)
}

// NewCreateEnvRequestWithBody generates requests for CreateEnv with any type of body
func NewCreateEnvRequestWithBody(server string, envId Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/envs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpRequestWithBody generates requests for Up with any type of body
func NewUpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/up")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWhoAmIRequest generates requests for WhoAmI
func NewWhoAmIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/whoami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAppsWithResponse request
	GetAppsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAppsResponse, error)

	// DeleteAppWithResponse request
	DeleteAppWithResponse(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error)

	// GetAppWithResponse request
	GetAppWithResponse(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*GetAppResponse, error)

	// CreateAppWithBodyWithResponse request with any body
	CreateAppWithBodyWithResponse(ctx context.Context, appId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	CreateAppWithResponse(ctx context.Context, appId Id, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	// GetEnvsWithResponse request
	GetEnvsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnvsResponse, error)

	// DeleteEnvWithResponse request
	DeleteEnvWithResponse(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*DeleteEnvResponse, error)

	// GetEnvWithResponse request
	GetEnvWithResponse(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*GetEnvResponse, error)

	// CreateEnvWithBodyWithResponse request with any body
	CreateEnvWithBodyWithResponse(ctx context.Context, envId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvResponse, error)

	CreateEnvWithResponse(ctx context.Context, envId Id, body CreateEnvJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvResponse, error)

	// UpWithBodyWithResponse request with any body
	UpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpResponse, error)

	// WhoAmIWithResponse request
	WhoAmIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WhoAmIResponse, error)
}

type GetAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Apps
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *App
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Envs
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetEnvsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteEnvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Env
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetEnvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Env
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateEnvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WhoAmIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WhoAmI
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r WhoAmIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WhoAmIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAppsWithResponse request returning *GetAppsResponse
func (c *ClientWithResponses) GetAppsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAppsResponse, error) {
	rsp, err := c.GetApps(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppsResponse(rsp)
}

// DeleteAppWithResponse request returning *DeleteAppResponse
func (c *ClientWithResponses) DeleteAppWithResponse(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error) {
	rsp, err := c.DeleteApp(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppResponse(rsp)
}

// GetAppWithResponse request returning *GetAppResponse
func (c *ClientWithResponses) GetAppWithResponse(ctx context.Context, appId Id, reqEditors ...RequestEditorFn) (*GetAppResponse, error) {
	rsp, err := c.GetApp(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppResponse(rsp)
}

// CreateAppWithBodyWithResponse request with arbitrary body returning *CreateAppResponse
func (c *ClientWithResponses) CreateAppWithBodyWithResponse(ctx context.Context, appId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateAppWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

func (c *ClientWithResponses) CreateAppWithResponse(ctx context.Context, appId Id, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateApp(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

// GetEnvsWithResponse request returning *GetEnvsResponse
func (c *ClientWithResponses) GetEnvsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnvsResponse, error) {
	rsp, err := c.GetEnvs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvsResponse(rsp)
}

// DeleteEnvWithResponse request returning *DeleteEnvResponse
func (c *ClientWithResponses) DeleteEnvWithResponse(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*DeleteEnvResponse, error) {
	rsp, err := c.DeleteEnv(ctx, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvResponse(rsp)
}

// GetEnvWithResponse request returning *GetEnvResponse
func (c *ClientWithResponses) GetEnvWithResponse(ctx context.Context, envId Id, reqEditors ...RequestEditorFn) (*GetEnvResponse, error) {
	rsp, err := c.GetEnv(ctx, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvResponse(rsp)
}

// CreateEnvWithBodyWithResponse request with arbitrary body returning *CreateEnvResponse
func (c *ClientWithResponses) CreateEnvWithBodyWithResponse(ctx context.Context, envId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvResponse, error) {
	rsp, err := c.CreateEnvWithBody(ctx, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvWithResponse(ctx context.Context, envId Id, body CreateEnvJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvResponse, error) {
	rsp, err := c.CreateEnv(ctx, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvResponse(rsp)
}

// UpWithBodyWithResponse request with arbitrary body returning *UpResponse
func (c *ClientWithResponses) UpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpResponse, error) {
	rsp, err := c.UpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpResponse(rsp)
}

// WhoAmIWithResponse request returning *WhoAmIResponse
func (c *ClientWithResponses) WhoAmIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WhoAmIResponse, error) {
	rsp, err := c.WhoAmI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWhoAmIResponse(rsp)
}

// ParseGetAppsResponse parses an HTTP response from a GetAppsWithResponse call
func ParseGetAppsResponse(rsp *http.Response) (*GetAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Apps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAppResponse parses an HTTP response from a DeleteAppWithResponse call
func ParseDeleteAppResponse(rsp *http.Response) (*DeleteAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAppResponse parses an HTTP response from a GetAppWithResponse call
func ParseGetAppResponse(rsp *http.Response) (*GetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAppResponse parses an HTTP response from a CreateAppWithResponse call
func ParseCreateAppResponse(rsp *http.Response) (*CreateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEnvsResponse parses an HTTP response from a GetEnvsWithResponse call
func ParseGetEnvsResponse(rsp *http.Response) (*GetEnvsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Envs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteEnvResponse parses an HTTP response from a DeleteEnvWithResponse call
func ParseDeleteEnvResponse(rsp *http.Response) (*DeleteEnvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEnvResponse parses an HTTP response from a GetEnvWithResponse call
func ParseGetEnvResponse(rsp *http.Response) (*GetEnvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Env
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateEnvResponse parses an HTTP response from a CreateEnvWithResponse call
func ParseCreateEnvResponse(rsp *http.Response) (*CreateEnvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Env
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpResponse parses an HTTP response from a UpWithResponse call
func ParseUpResponse(rsp *http.Response) (*UpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseWhoAmIResponse parses an HTTP response from a WhoAmIWithResponse call
func ParseWhoAmIResponse(rsp *http.Response) (*WhoAmIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WhoAmIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WhoAmI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/apps)
	GetApps(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/apps/{appId})
	DeleteApp(w http.ResponseWriter, r *http.Request, appId Id)

	// (GET /api/apps/{appId})
	GetApp(w http.ResponseWriter, r *http.Request, appId Id)

	// (PUT /api/apps/{appId})
	CreateApp(w http.ResponseWriter, r *http.Request, appId Id)

	// (GET /api/envs)
	GetEnvs(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/envs/{envId})
	DeleteEnv(w http.ResponseWriter, r *http.Request, envId Id)

	// (GET /api/envs/{envId})
	GetEnv(w http.ResponseWriter, r *http.Request, envId Id)

	// (PUT /api/envs/{envId})
	CreateEnv(w http.ResponseWriter, r *http.Request, envId Id)

	// (POST /api/up)
	Up(w http.ResponseWriter, r *http.Request)

	// (GET /api/whoami)
	WhoAmI(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /api/apps)
func (_ Unimplemented) GetApps(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/apps/{appId})
func (_ Unimplemented) DeleteApp(w http.ResponseWriter, r *http.Request, appId Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/apps/{appId})
func (_ Unimplemented) GetApp(w http.ResponseWriter, r *http.Request, appId Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/apps/{appId})
func (_ Unimplemented) CreateApp(w http.ResponseWriter, r *http.Request, appId Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/envs)
func (_ Unimplemented) GetEnvs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/envs/{envId})
func (_ Unimplemented) DeleteEnv(w http.ResponseWriter, r *http.Request, envId Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/envs/{envId})
func (_ Unimplemented) GetEnv(w http.ResponseWriter, r *http.Request, envId Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/envs/{envId})
func (_ Unimplemented) CreateEnv(w http.ResponseWriter, r *http.Request, envId Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/up)
func (_ Unimplemented) Up(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/whoami)
func (_ Unimplemented) WhoAmI(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApps operation middleware
func (siw *ServerInterfaceWrapper) GetApps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApp operation middleware
func (siw *ServerInterfaceWrapper) DeleteApp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId Id

	err = runtime.BindStyledParameterWithOptions("simple", "appId", chi.URLParam(r, "appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApp(w, r, appId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApp operation middleware
func (siw *ServerInterfaceWrapper) GetApp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId Id

	err = runtime.BindStyledParameterWithOptions("simple", "appId", chi.URLParam(r, "appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApp(w, r, appId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateApp operation middleware
func (siw *ServerInterfaceWrapper) CreateApp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "appId" -------------
	var appId Id

	err = runtime.BindStyledParameterWithOptions("simple", "appId", chi.URLParam(r, "appId"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateApp(w, r, appId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEnvs operation middleware
func (siw *ServerInterfaceWrapper) GetEnvs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnvs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEnv operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnv(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "envId" -------------
	var envId Id

	err = runtime.BindStyledParameterWithOptions("simple", "envId", chi.URLParam(r, "envId"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "envId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnv(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEnv operation middleware
func (siw *ServerInterfaceWrapper) GetEnv(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "envId" -------------
	var envId Id

	err = runtime.BindStyledParameterWithOptions("simple", "envId", chi.URLParam(r, "envId"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "envId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnv(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEnv operation middleware
func (siw *ServerInterfaceWrapper) CreateEnv(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "envId" -------------
	var envId Id

	err = runtime.BindStyledParameterWithOptions("simple", "envId", chi.URLParam(r, "envId"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "envId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEnv(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Up operation middleware
func (siw *ServerInterfaceWrapper) Up(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Up(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WhoAmI operation middleware
func (siw *ServerInterfaceWrapper) WhoAmI(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WhoAmI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/apps", wrapper.GetApps)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/apps/{appId}", wrapper.DeleteApp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/apps/{appId}", wrapper.GetApp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/apps/{appId}", wrapper.CreateApp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/envs", wrapper.GetEnvs)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/envs/{envId}", wrapper.DeleteEnv)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/envs/{envId}", wrapper.GetEnv)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/envs/{envId}", wrapper.CreateEnv)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/up", wrapper.Up)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/whoami", wrapper.WhoAmI)
	})

	return r
}

type BadRequestJSONResponse Error

type InternalServerErrorJSONResponse Error

type NotFoundJSONResponse Error

type GetAppsRequestObject struct {
}

type GetAppsResponseObject interface {
	VisitGetAppsResponse(w http.ResponseWriter) error
}

type GetApps200JSONResponse Apps

func (response GetApps200JSONResponse) VisitGetAppsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApps500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetApps500JSONResponse) VisitGetAppsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAppRequestObject struct {
	AppId Id `json:"appId"`
}

type DeleteAppResponseObject interface {
	VisitDeleteAppResponse(w http.ResponseWriter) error
}

type DeleteApp204Response struct {
}

func (response DeleteApp204Response) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApp404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteApp404JSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApp500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteApp500JSONResponse) VisitDeleteAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAppRequestObject struct {
	AppId Id `json:"appId"`
}

type GetAppResponseObject interface {
	VisitGetAppResponse(w http.ResponseWriter) error
}

type GetApp200JSONResponse App

func (response GetApp200JSONResponse) VisitGetAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApp404JSONResponse struct{ NotFoundJSONResponse }

func (response GetApp404JSONResponse) VisitGetAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApp500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetApp500JSONResponse) VisitGetAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAppRequestObject struct {
	AppId Id `json:"appId"`
	Body  *CreateAppJSONRequestBody
}

type CreateAppResponseObject interface {
	VisitCreateAppResponse(w http.ResponseWriter) error
}

type CreateApp201JSONResponse App

func (response CreateApp201JSONResponse) VisitCreateAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateApp400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateApp400JSONResponse) VisitCreateAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateApp500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateApp500JSONResponse) VisitCreateAppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvsRequestObject struct {
}

type GetEnvsResponseObject interface {
	VisitGetEnvsResponse(w http.ResponseWriter) error
}

type GetEnvs200JSONResponse Envs

func (response GetEnvs200JSONResponse) VisitGetEnvsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvs500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetEnvs500JSONResponse) VisitGetEnvsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnvRequestObject struct {
	EnvId Id `json:"envId"`
}

type DeleteEnvResponseObject interface {
	VisitDeleteEnvResponse(w http.ResponseWriter) error
}

type DeleteEnv204Response struct {
}

func (response DeleteEnv204Response) VisitDeleteEnvResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEnv404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteEnv404JSONResponse) VisitDeleteEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnv500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteEnv500JSONResponse) VisitDeleteEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvRequestObject struct {
	EnvId Id `json:"envId"`
}

type GetEnvResponseObject interface {
	VisitGetEnvResponse(w http.ResponseWriter) error
}

type GetEnv200JSONResponse Env

func (response GetEnv200JSONResponse) VisitGetEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnv404JSONResponse struct{ NotFoundJSONResponse }

func (response GetEnv404JSONResponse) VisitGetEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEnv500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetEnv500JSONResponse) VisitGetEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnvRequestObject struct {
	EnvId Id `json:"envId"`
	Body  *CreateEnvJSONRequestBody
}

type CreateEnvResponseObject interface {
	VisitCreateEnvResponse(w http.ResponseWriter) error
}

type CreateEnv201JSONResponse Env

func (response CreateEnv201JSONResponse) VisitCreateEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnv400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateEnv400JSONResponse) VisitCreateEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnv500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateEnv500JSONResponse) VisitCreateEnvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpRequestObject struct {
	Body *multipart.Reader
}

type UpResponseObject interface {
	VisitUpResponse(w http.ResponseWriter) error
}

type Up200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Up200TexteventStreamResponse) VisitUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type Up400JSONResponse struct{ BadRequestJSONResponse }

func (response Up400JSONResponse) VisitUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Up500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Up500JSONResponse) VisitUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type WhoAmIRequestObject struct {
}

type WhoAmIResponseObject interface {
	VisitWhoAmIResponse(w http.ResponseWriter) error
}

type WhoAmI200JSONResponse WhoAmI

func (response WhoAmI200JSONResponse) VisitWhoAmIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WhoAmI500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response WhoAmI500JSONResponse) VisitWhoAmIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/apps)
	GetApps(ctx context.Context, request GetAppsRequestObject) (GetAppsResponseObject, error)

	// (DELETE /api/apps/{appId})
	DeleteApp(ctx context.Context, request DeleteAppRequestObject) (DeleteAppResponseObject, error)

	// (GET /api/apps/{appId})
	GetApp(ctx context.Context, request GetAppRequestObject) (GetAppResponseObject, error)

	// (PUT /api/apps/{appId})
	CreateApp(ctx context.Context, request CreateAppRequestObject) (CreateAppResponseObject, error)

	// (GET /api/envs)
	GetEnvs(ctx context.Context, request GetEnvsRequestObject) (GetEnvsResponseObject, error)

	// (DELETE /api/envs/{envId})
	DeleteEnv(ctx context.Context, request DeleteEnvRequestObject) (DeleteEnvResponseObject, error)

	// (GET /api/envs/{envId})
	GetEnv(ctx context.Context, request GetEnvRequestObject) (GetEnvResponseObject, error)

	// (PUT /api/envs/{envId})
	CreateEnv(ctx context.Context, request CreateEnvRequestObject) (CreateEnvResponseObject, error)

	// (POST /api/up)
	Up(ctx context.Context, request UpRequestObject) (UpResponseObject, error)

	// (GET /api/whoami)
	WhoAmI(ctx context.Context, request WhoAmIRequestObject) (WhoAmIResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApps operation middleware
func (sh *strictHandler) GetApps(w http.ResponseWriter, r *http.Request) {
	var request GetAppsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApps(ctx, request.(GetAppsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAppsResponseObject); ok {
		if err := validResponse.VisitGetAppsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApp operation middleware
func (sh *strictHandler) DeleteApp(w http.ResponseWriter, r *http.Request, appId Id) {
	var request DeleteAppRequestObject

	request.AppId = appId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApp(ctx, request.(DeleteAppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAppResponseObject); ok {
		if err := validResponse.VisitDeleteAppResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApp operation middleware
func (sh *strictHandler) GetApp(w http.ResponseWriter, r *http.Request, appId Id) {
	var request GetAppRequestObject

	request.AppId = appId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApp(ctx, request.(GetAppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAppResponseObject); ok {
		if err := validResponse.VisitGetAppResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateApp operation middleware
func (sh *strictHandler) CreateApp(w http.ResponseWriter, r *http.Request, appId Id) {
	var request CreateAppRequestObject

	request.AppId = appId

	var body CreateAppJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateApp(ctx, request.(CreateAppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateApp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAppResponseObject); ok {
		if err := validResponse.VisitCreateAppResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnvs operation middleware
func (sh *strictHandler) GetEnvs(w http.ResponseWriter, r *http.Request) {
	var request GetEnvsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvs(ctx, request.(GetEnvsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnvsResponseObject); ok {
		if err := validResponse.VisitGetEnvsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnv operation middleware
func (sh *strictHandler) DeleteEnv(w http.ResponseWriter, r *http.Request, envId Id) {
	var request DeleteEnvRequestObject

	request.EnvId = envId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnv(ctx, request.(DeleteEnvRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnv")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnvResponseObject); ok {
		if err := validResponse.VisitDeleteEnvResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnv operation middleware
func (sh *strictHandler) GetEnv(w http.ResponseWriter, r *http.Request, envId Id) {
	var request GetEnvRequestObject

	request.EnvId = envId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnv(ctx, request.(GetEnvRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnv")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEnvResponseObject); ok {
		if err := validResponse.VisitGetEnvResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEnv operation middleware
func (sh *strictHandler) CreateEnv(w http.ResponseWriter, r *http.Request, envId Id) {
	var request CreateEnvRequestObject

	request.EnvId = envId

	var body CreateEnvJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEnv(ctx, request.(CreateEnvRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEnv")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEnvResponseObject); ok {
		if err := validResponse.VisitCreateEnvResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Up operation middleware
func (sh *strictHandler) Up(w http.ResponseWriter, r *http.Request) {
	var request UpRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Up(ctx, request.(UpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Up")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpResponseObject); ok {
		if err := validResponse.VisitUpResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WhoAmI operation middleware
func (sh *strictHandler) WhoAmI(w http.ResponseWriter, r *http.Request) {
	var request WhoAmIRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WhoAmI(ctx, request.(WhoAmIRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WhoAmI")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WhoAmIResponseObject); ok {
		if err := validResponse.VisitWhoAmIResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+VwiuDxsmW0qaFp2elrTZYKArirbBgAVecBHPFluJZElKrhvofx9I+pds",
	"xVG3OG2BPdmSjnfH7z7eR/KGZrJUUqCwhqY3VKNRUhj0D2fA3uDHCo11T5kUFoX/C0oVPAPLpYjfGync",
	"O5PlWIL790jjhKb0h3jtOg5fTXyutdS0aZqIMjSZ5so5oamLRZbBmoiOhEUtoHiLukYdRh08h2VQEqKS",
	"hWFEX0n7m6wEO3wKr6QlIZT7tjB33k6Vcj9KS4Xa8lCgTCNYZFfg05lIXbp/lIHFgeUl0ojauUKaUmM1",
	"F1M3Fz9G6ivO7kpyxJx9XzsBJTrLnYAWoewdrVLsC2fURFTjx4prZDS9dOlGm7i0XK6TaeGwSH688i2v",
	"32PmeXiqlEeaWyzNXVNwNWpWTkBrmLvnc1HfT+n+cykOje6tMJ6Luj+MDq8uGJdNYAtIyboni0v7/VMK",
	"Zl1Jjzzc7fV5SoIbMuM2J0CUxgn/FJFKMNQmkxojAoKR46cECpWDqErUPCNZDhoyi9qQH10gMnrxE40o",
	"foJSFS5sZVBfJUcnH6ZPnrIswdnEnLBpPXn/TF1/Nq4yCqxrTzSlf1/C4PP45yv3kwx+Gd8cP20edRHm",
	"Qr2UUzeJVZwbWqIxMHV2ZxUvGDEWtEVXV8+AlB4nx48HR0eD4+TdUZI+TtIk+cs5a8O+crON0PPQH4mc",
	"EJsjKeR02JVaCLY9+B0v0Vgo1dbwnlTdKeGfuTwtR/ez+r6oj3nj21ui/ICip68tuq6GbvaydbTW6twl",
	"tdMUzCrN7fytixHQuEbQqE8rm+9W5Mx/Iz4sXSiS8xjGrHHKrVVB0LiYyKVQQuYBxhJ44RColJLa/ipF",
	"iRaKIcOw0rn1a+AP95Kcvh7RiNaoTcggGSbDI2cmFQpQnKb08TAZJmFJ5H4GMSgew6JXT9EHdfX22uzW",
	"Mf0dre/lUXuLc5wk9ybq3n+Hpr9BqznWSKAoyIZ74yb1JCTQ5XeVaNy1G9qsJU0v21W8HDdjZ7DCJb4B",
	"pUasCQUu0OIuRC/8eydiDlkNJbp+5X1zNw+H9rLJp9T7o5vktLrCqCdWntnjnWKcdHRcpYipsgyNmVRF",
	"MSchfb/KTsKA/eCtNm+HRTvax7uvh+i90ns/u8Umub+98qiqozzPfbd86Ar5Y86ZZPMvKk5bwpbishKv",
	"Qs5QZ2BwufHI5yr3TXv/BuiWTVsT7FpkOjo0mUI5OqnUgxkb59WH6ay42NbetvL9tveAS9L7v0txUNRc",
	"O8V1R/yHwyW+QVH3Uhy33++z+ry/B1Cc8zVg37nyfFVk75XmdynPBsm/K+V56Ar9rzy3kGmtPDtU+haV",
	"pwq3gdJ0MOtC0X2lLqvCcgXaxq6AAwYW9lUblOp96gWd5bxuk+OaC9DzrgM1ivrfnYEXA6NlbuvA/ci0",
	"3ZksfrIx1ijswFiNUPZnU7hh6eDThSokMKIxQ14jawsJCEau/e1LTBiqQs6X1zDDb5dys1xCyW/d7iyu",
	"Wg4oA4sI+5SAi8A7LgWBa1lZf4kElc1RWBcV2eIq48CY3WXhPjuHoeG3Z/NaS1Zlfg4Xb17SiFa6WNyw",
	"mDSOZ7PZsH2Bsu3gBdZYSOU3MNse0jguZAZFLo1NnyXPEtqMm38CAAD//8TQ/PYGGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
