/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Rollout: {
      apiVersion?: string;
      kind?: string;
      metadata?: Record<string, never>;
      spec: {
        analysis?: {
          /** Format: int32 */
          successfulRunHistoryLimit?: number;
          /** Format: int32 */
          unsuccessfulRunHistoryLimit?: number;
        };
        /** Format: int32 */
        minReadySeconds?: number;
        paused?: boolean;
        progressDeadlineAbort?: boolean;
        /** Format: int32 */
        progressDeadlineSeconds?: number;
        /** Format: int32 */
        replicas?: number;
        /** Format: date-time */
        restartAt?: string;
        /** Format: int32 */
        revisionHistoryLimit?: number;
        rollbackWindow?: {
          /** Format: int32 */
          revisions?: number;
        };
        selector?: {
          matchExpressions?: {
              key: string;
              operator: string;
              values?: string[];
            }[];
          matchLabels?: {
            [key: string]: string;
          };
        };
        strategy?: {
          blueGreen?: {
            /** Format: int32 */
            abortScaleDownDelaySeconds?: number;
            activeMetadata?: {
              annotations?: {
                [key: string]: string;
              };
              labels?: {
                [key: string]: string;
              };
            };
            activeService: string;
            antiAffinity?: {
              preferredDuringSchedulingIgnoredDuringExecution?: {
                /** Format: int32 */
                weight: number;
              };
              requiredDuringSchedulingIgnoredDuringExecution?: Record<string, never>;
            };
            autoPromotionEnabled?: boolean;
            /** Format: int32 */
            autoPromotionSeconds?: number;
            maxUnavailable?: number | string;
            postPromotionAnalysis?: {
              analysisRunMetadata?: {
                annotations?: {
                  [key: string]: string;
                };
                labels?: {
                  [key: string]: string;
                };
              };
              args?: {
                  name: string;
                  value?: string;
                  valueFrom?: {
                    fieldRef?: {
                      fieldPath: string;
                    };
                    podTemplateHashValue?: string;
                  };
                }[];
              dryRun?: {
                  metricName: string;
                }[];
              measurementRetention?: {
                  /** Format: int32 */
                  limit: number;
                  metricName: string;
                }[];
              templates?: {
                  clusterScope?: boolean;
                  templateName?: string;
                }[];
            };
            prePromotionAnalysis?: {
              analysisRunMetadata?: {
                annotations?: {
                  [key: string]: string;
                };
                labels?: {
                  [key: string]: string;
                };
              };
              args?: {
                  name: string;
                  value?: string;
                  valueFrom?: {
                    fieldRef?: {
                      fieldPath: string;
                    };
                    podTemplateHashValue?: string;
                  };
                }[];
              dryRun?: {
                  metricName: string;
                }[];
              measurementRetention?: {
                  /** Format: int32 */
                  limit: number;
                  metricName: string;
                }[];
              templates?: {
                  clusterScope?: boolean;
                  templateName?: string;
                }[];
            };
            previewMetadata?: {
              annotations?: {
                [key: string]: string;
              };
              labels?: {
                [key: string]: string;
              };
            };
            /** Format: int32 */
            previewReplicaCount?: number;
            previewService?: string;
            /** Format: int32 */
            scaleDownDelayRevisionLimit?: number;
            /** Format: int32 */
            scaleDownDelaySeconds?: number;
          };
          canary?: {
            /** Format: int32 */
            abortScaleDownDelaySeconds?: number;
            analysis?: {
              analysisRunMetadata?: {
                annotations?: {
                  [key: string]: string;
                };
                labels?: {
                  [key: string]: string;
                };
              };
              args?: {
                  name: string;
                  value?: string;
                  valueFrom?: {
                    fieldRef?: {
                      fieldPath: string;
                    };
                    podTemplateHashValue?: string;
                  };
                }[];
              dryRun?: {
                  metricName: string;
                }[];
              measurementRetention?: {
                  /** Format: int32 */
                  limit: number;
                  metricName: string;
                }[];
              /** Format: int32 */
              startingStep?: number;
              templates?: {
                  clusterScope?: boolean;
                  templateName?: string;
                }[];
            };
            antiAffinity?: {
              preferredDuringSchedulingIgnoredDuringExecution?: {
                /** Format: int32 */
                weight: number;
              };
              requiredDuringSchedulingIgnoredDuringExecution?: Record<string, never>;
            };
            canaryMetadata?: {
              annotations?: {
                [key: string]: string;
              };
              labels?: {
                [key: string]: string;
              };
            };
            canaryService?: string;
            dynamicStableScale?: boolean;
            maxSurge?: number | string;
            maxUnavailable?: number | string;
            /** Format: int32 */
            minPodsPerReplicaSet?: number;
            pingPong?: {
              pingService: string;
              pongService: string;
            };
            /** Format: int32 */
            scaleDownDelayRevisionLimit?: number;
            /** Format: int32 */
            scaleDownDelaySeconds?: number;
            stableMetadata?: {
              annotations?: {
                [key: string]: string;
              };
              labels?: {
                [key: string]: string;
              };
            };
            stableService?: string;
            steps?: ({
                analysis?: {
                  analysisRunMetadata?: {
                    annotations?: {
                      [key: string]: string;
                    };
                    labels?: {
                      [key: string]: string;
                    };
                  };
                  args?: {
                      name: string;
                      value?: string;
                      valueFrom?: {
                        fieldRef?: {
                          fieldPath: string;
                        };
                        podTemplateHashValue?: string;
                      };
                    }[];
                  dryRun?: {
                      metricName: string;
                    }[];
                  measurementRetention?: {
                      /** Format: int32 */
                      limit: number;
                      metricName: string;
                    }[];
                  templates?: {
                      clusterScope?: boolean;
                      templateName?: string;
                    }[];
                };
                experiment?: {
                  analyses?: {
                      args?: {
                          name: string;
                          value?: string;
                          valueFrom?: {
                            fieldRef?: {
                              fieldPath: string;
                            };
                            podTemplateHashValue?: string;
                          };
                        }[];
                      clusterScope?: boolean;
                      name: string;
                      requiredForCompletion?: boolean;
                      templateName: string;
                    }[];
                  analysisRunMetadata?: {
                    annotations?: {
                      [key: string]: string;
                    };
                    labels?: {
                      [key: string]: string;
                    };
                  };
                  dryRun?: {
                      metricName: string;
                    }[];
                  duration?: string;
                  templates: {
                      metadata?: {
                        annotations?: {
                          [key: string]: string;
                        };
                        labels?: {
                          [key: string]: string;
                        };
                      };
                      name: string;
                      /** Format: int32 */
                      replicas?: number;
                      selector?: {
                        matchExpressions?: {
                            key: string;
                            operator: string;
                            values?: string[];
                          }[];
                        matchLabels?: {
                          [key: string]: string;
                        };
                      };
                      service?: {
                        name?: string;
                      };
                      specRef: string;
                      /** Format: int32 */
                      weight?: number;
                    }[];
                };
                pause?: {
                  duration?: number | string;
                };
                setCanaryScale?: {
                  matchTrafficWeight?: boolean;
                  /** Format: int32 */
                  replicas?: number;
                  /** Format: int32 */
                  weight?: number;
                };
                setHeaderRoute?: {
                  match?: {
                      headerName: string;
                      headerValue: {
                        exact?: string;
                        prefix?: string;
                        regex?: string;
                      };
                    }[];
                  name?: string;
                };
                setMirrorRoute?: {
                  match?: {
                      headers?: {
                        [key: string]: {
                          exact?: string;
                          prefix?: string;
                          regex?: string;
                        };
                      };
                      method?: {
                        exact?: string;
                        prefix?: string;
                        regex?: string;
                      };
                      path?: {
                        exact?: string;
                        prefix?: string;
                        regex?: string;
                      };
                    }[];
                  name: string;
                  /** Format: int32 */
                  percentage?: number;
                };
                /** Format: int32 */
                setWeight?: number;
              })[];
            trafficRouting?: {
              alb?: {
                annotationPrefix?: string;
                ingress?: string;
                ingresses?: string[];
                rootService?: string;
                /** Format: int32 */
                servicePort: number;
                stickinessConfig?: {
                  /** Format: int64 */
                  durationSeconds: number;
                  enabled: boolean;
                };
              };
              ambassador?: {
                mappings: string[];
              };
              apisix?: {
                route?: {
                  name: string;
                  rules?: string[];
                };
              };
              appMesh?: {
                virtualNodeGroup?: {
                  canaryVirtualNodeRef: {
                    name: string;
                  };
                  stableVirtualNodeRef: {
                    name: string;
                  };
                };
                virtualService?: {
                  name: string;
                  routes?: string[];
                };
              };
              istio?: {
                destinationRule?: {
                  canarySubsetName: string;
                  name: string;
                  stableSubsetName: string;
                };
                virtualService?: {
                  name: string;
                  routes?: string[];
                  tcpRoutes?: {
                      /** Format: int64 */
                      port?: number;
                    }[];
                  tlsRoutes?: {
                      /** Format: int64 */
                      port?: number;
                      sniHosts?: string[];
                    }[];
                };
                virtualServices?: {
                    name: string;
                    routes?: string[];
                    tcpRoutes?: {
                        /** Format: int64 */
                        port?: number;
                      }[];
                    tlsRoutes?: {
                        /** Format: int64 */
                        port?: number;
                        sniHosts?: string[];
                      }[];
                  }[];
              };
              managedRoutes?: {
                  name: string;
                }[];
              /** Format: int32 */
              maxTrafficWeight?: number;
              nginx?: {
                additionalIngressAnnotations?: {
                  [key: string]: string;
                };
                annotationPrefix?: string;
                stableIngress?: string;
                stableIngresses?: string[];
              };
              plugins?: Record<string, never>;
              smi?: {
                rootService?: string;
                trafficSplitName?: string;
              };
              traefik?: {
                weightedTraefikServiceName: string;
              };
            };
          };
        };
        template?: {
          metadata?: {
            annotations?: {
              [key: string]: string;
            };
            labels?: {
              [key: string]: string;
            };
          };
          spec?: {
            /** Format: int64 */
            activeDeadlineSeconds?: number;
            affinity?: {
              nodeAffinity?: {
                preferredDuringSchedulingIgnoredDuringExecution?: {
                    preference: {
                      matchExpressions?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                      matchFields?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                    };
                    /** Format: int32 */
                    weight: number;
                  }[];
                requiredDuringSchedulingIgnoredDuringExecution?: {
                  nodeSelectorTerms: {
                      matchExpressions?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                      matchFields?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                    }[];
                };
              };
              podAffinity?: {
                preferredDuringSchedulingIgnoredDuringExecution?: {
                    podAffinityTerm: {
                      labelSelector?: {
                        matchExpressions?: {
                            key: string;
                            operator: string;
                            values?: string[];
                          }[];
                        matchLabels?: {
                          [key: string]: string;
                        };
                      };
                      matchLabelKeys?: string[];
                      mismatchLabelKeys?: string[];
                      namespaceSelector?: {
                        matchExpressions?: {
                            key: string;
                            operator: string;
                            values?: string[];
                          }[];
                        matchLabels?: {
                          [key: string]: string;
                        };
                      };
                      namespaces?: string[];
                      topologyKey: string;
                    };
                    /** Format: int32 */
                    weight: number;
                  }[];
                requiredDuringSchedulingIgnoredDuringExecution?: {
                    labelSelector?: {
                      matchExpressions?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                      matchLabels?: {
                        [key: string]: string;
                      };
                    };
                    matchLabelKeys?: string[];
                    mismatchLabelKeys?: string[];
                    namespaceSelector?: {
                      matchExpressions?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                      matchLabels?: {
                        [key: string]: string;
                      };
                    };
                    namespaces?: string[];
                    topologyKey: string;
                  }[];
              };
              podAntiAffinity?: {
                preferredDuringSchedulingIgnoredDuringExecution?: {
                    podAffinityTerm: {
                      labelSelector?: {
                        matchExpressions?: {
                            key: string;
                            operator: string;
                            values?: string[];
                          }[];
                        matchLabels?: {
                          [key: string]: string;
                        };
                      };
                      matchLabelKeys?: string[];
                      mismatchLabelKeys?: string[];
                      namespaceSelector?: {
                        matchExpressions?: {
                            key: string;
                            operator: string;
                            values?: string[];
                          }[];
                        matchLabels?: {
                          [key: string]: string;
                        };
                      };
                      namespaces?: string[];
                      topologyKey: string;
                    };
                    /** Format: int32 */
                    weight: number;
                  }[];
                requiredDuringSchedulingIgnoredDuringExecution?: {
                    labelSelector?: {
                      matchExpressions?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                      matchLabels?: {
                        [key: string]: string;
                      };
                    };
                    matchLabelKeys?: string[];
                    mismatchLabelKeys?: string[];
                    namespaceSelector?: {
                      matchExpressions?: {
                          key: string;
                          operator: string;
                          values?: string[];
                        }[];
                      matchLabels?: {
                        [key: string]: string;
                      };
                    };
                    namespaces?: string[];
                    topologyKey: string;
                  }[];
              };
            };
            automountServiceAccountToken?: boolean;
            containers: ({
                args?: string[];
                command?: string[];
                env?: ({
                    name: string;
                    value?: string;
                    valueFrom?: {
                      configMapKeyRef?: {
                        key: string;
                        name?: string;
                        optional?: boolean;
                      };
                      fieldRef?: {
                        apiVersion?: string;
                        fieldPath: string;
                      };
                      resourceFieldRef?: {
                        containerName?: string;
                        divisor?: number | string;
                        resource: string;
                      };
                      secretKeyRef?: {
                        key: string;
                        name?: string;
                        optional?: boolean;
                      };
                    };
                  })[];
                envFrom?: {
                    configMapRef?: {
                      name?: string;
                      optional?: boolean;
                    };
                    prefix?: string;
                    secretRef?: {
                      name?: string;
                      optional?: boolean;
                    };
                  }[];
                image?: string;
                imagePullPolicy?: string;
                lifecycle?: {
                  postStart?: {
                    exec?: {
                      command?: string[];
                    };
                    httpGet?: {
                      host?: string;
                      httpHeaders?: {
                          name: string;
                          value: string;
                        }[];
                      path?: string;
                      port: number | string;
                      scheme?: string;
                    };
                    sleep?: {
                      /** Format: int64 */
                      seconds: number;
                    };
                    tcpSocket?: {
                      host?: string;
                      port: number | string;
                    };
                  };
                  preStop?: {
                    exec?: {
                      command?: string[];
                    };
                    httpGet?: {
                      host?: string;
                      httpHeaders?: {
                          name: string;
                          value: string;
                        }[];
                      path?: string;
                      port: number | string;
                      scheme?: string;
                    };
                    sleep?: {
                      /** Format: int64 */
                      seconds: number;
                    };
                    tcpSocket?: {
                      host?: string;
                      port: number | string;
                    };
                  };
                };
                livenessProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                name: string;
                ports?: {
                    /** Format: int32 */
                    containerPort: number;
                    hostIP?: string;
                    /** Format: int32 */
                    hostPort?: number;
                    name?: string;
                    /** @default TCP */
                    protocol?: string;
                  }[];
                readinessProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                resizePolicy?: {
                    resourceName: string;
                    restartPolicy: string;
                  }[];
                resources?: {
                  claims?: {
                      name: string;
                    }[];
                  limits?: unknown;
                  requests?: unknown;
                };
                restartPolicy?: string;
                securityContext?: {
                  allowPrivilegeEscalation?: boolean;
                  capabilities?: {
                    add?: string[];
                    drop?: string[];
                  };
                  privileged?: boolean;
                  procMount?: string;
                  readOnlyRootFilesystem?: boolean;
                  /** Format: int64 */
                  runAsGroup?: number;
                  runAsNonRoot?: boolean;
                  /** Format: int64 */
                  runAsUser?: number;
                  seLinuxOptions?: {
                    level?: string;
                    role?: string;
                    type?: string;
                    user?: string;
                  };
                  seccompProfile?: {
                    localhostProfile?: string;
                    type: string;
                  };
                  windowsOptions?: {
                    gmsaCredentialSpec?: string;
                    gmsaCredentialSpecName?: string;
                    hostProcess?: boolean;
                    runAsUserName?: string;
                  };
                };
                startupProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                stdin?: boolean;
                stdinOnce?: boolean;
                terminationMessagePath?: string;
                terminationMessagePolicy?: string;
                tty?: boolean;
                volumeDevices?: {
                    devicePath: string;
                    name: string;
                  }[];
                volumeMounts?: {
                    mountPath: string;
                    mountPropagation?: string;
                    name: string;
                    readOnly?: boolean;
                    subPath?: string;
                    subPathExpr?: string;
                  }[];
                workingDir?: string;
              })[];
            dnsConfig?: {
              nameservers?: string[];
              options?: {
                  name?: string;
                  value?: string;
                }[];
              searches?: string[];
            };
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: ({
                args?: string[];
                command?: string[];
                env?: ({
                    name: string;
                    value?: string;
                    valueFrom?: {
                      configMapKeyRef?: {
                        key: string;
                        name?: string;
                        optional?: boolean;
                      };
                      fieldRef?: {
                        apiVersion?: string;
                        fieldPath: string;
                      };
                      resourceFieldRef?: {
                        containerName?: string;
                        divisor?: number | string;
                        resource: string;
                      };
                      secretKeyRef?: {
                        key: string;
                        name?: string;
                        optional?: boolean;
                      };
                    };
                  })[];
                envFrom?: {
                    configMapRef?: {
                      name?: string;
                      optional?: boolean;
                    };
                    prefix?: string;
                    secretRef?: {
                      name?: string;
                      optional?: boolean;
                    };
                  }[];
                image?: string;
                imagePullPolicy?: string;
                lifecycle?: {
                  postStart?: {
                    exec?: {
                      command?: string[];
                    };
                    httpGet?: {
                      host?: string;
                      httpHeaders?: {
                          name: string;
                          value: string;
                        }[];
                      path?: string;
                      port: number | string;
                      scheme?: string;
                    };
                    sleep?: {
                      /** Format: int64 */
                      seconds: number;
                    };
                    tcpSocket?: {
                      host?: string;
                      port: number | string;
                    };
                  };
                  preStop?: {
                    exec?: {
                      command?: string[];
                    };
                    httpGet?: {
                      host?: string;
                      httpHeaders?: {
                          name: string;
                          value: string;
                        }[];
                      path?: string;
                      port: number | string;
                      scheme?: string;
                    };
                    sleep?: {
                      /** Format: int64 */
                      seconds: number;
                    };
                    tcpSocket?: {
                      host?: string;
                      port: number | string;
                    };
                  };
                };
                livenessProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                name: string;
                ports?: {
                    /** Format: int32 */
                    containerPort: number;
                    hostIP?: string;
                    /** Format: int32 */
                    hostPort?: number;
                    name?: string;
                    /** @default TCP */
                    protocol?: string;
                  }[];
                readinessProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                resizePolicy?: {
                    resourceName: string;
                    restartPolicy: string;
                  }[];
                resources?: {
                  claims?: {
                      name: string;
                    }[];
                  limits?: unknown;
                  requests?: unknown;
                };
                restartPolicy?: string;
                securityContext?: {
                  allowPrivilegeEscalation?: boolean;
                  capabilities?: {
                    add?: string[];
                    drop?: string[];
                  };
                  privileged?: boolean;
                  procMount?: string;
                  readOnlyRootFilesystem?: boolean;
                  /** Format: int64 */
                  runAsGroup?: number;
                  runAsNonRoot?: boolean;
                  /** Format: int64 */
                  runAsUser?: number;
                  seLinuxOptions?: {
                    level?: string;
                    role?: string;
                    type?: string;
                    user?: string;
                  };
                  seccompProfile?: {
                    localhostProfile?: string;
                    type: string;
                  };
                  windowsOptions?: {
                    gmsaCredentialSpec?: string;
                    gmsaCredentialSpecName?: string;
                    hostProcess?: boolean;
                    runAsUserName?: string;
                  };
                };
                startupProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                stdin?: boolean;
                stdinOnce?: boolean;
                targetContainerName?: string;
                terminationMessagePath?: string;
                terminationMessagePolicy?: string;
                tty?: boolean;
                volumeDevices?: {
                    devicePath: string;
                    name: string;
                  }[];
                volumeMounts?: {
                    mountPath: string;
                    mountPropagation?: string;
                    name: string;
                    readOnly?: boolean;
                    subPath?: string;
                    subPathExpr?: string;
                  }[];
                workingDir?: string;
              })[];
            hostAliases?: {
                hostnames?: string[];
                ip?: string;
              }[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostUsers?: boolean;
            hostname?: string;
            imagePullSecrets?: {
                name?: string;
              }[];
            initContainers?: ({
                args?: string[];
                command?: string[];
                env?: ({
                    name: string;
                    value?: string;
                    valueFrom?: {
                      configMapKeyRef?: {
                        key: string;
                        name?: string;
                        optional?: boolean;
                      };
                      fieldRef?: {
                        apiVersion?: string;
                        fieldPath: string;
                      };
                      resourceFieldRef?: {
                        containerName?: string;
                        divisor?: number | string;
                        resource: string;
                      };
                      secretKeyRef?: {
                        key: string;
                        name?: string;
                        optional?: boolean;
                      };
                    };
                  })[];
                envFrom?: {
                    configMapRef?: {
                      name?: string;
                      optional?: boolean;
                    };
                    prefix?: string;
                    secretRef?: {
                      name?: string;
                      optional?: boolean;
                    };
                  }[];
                image?: string;
                imagePullPolicy?: string;
                lifecycle?: {
                  postStart?: {
                    exec?: {
                      command?: string[];
                    };
                    httpGet?: {
                      host?: string;
                      httpHeaders?: {
                          name: string;
                          value: string;
                        }[];
                      path?: string;
                      port: number | string;
                      scheme?: string;
                    };
                    sleep?: {
                      /** Format: int64 */
                      seconds: number;
                    };
                    tcpSocket?: {
                      host?: string;
                      port: number | string;
                    };
                  };
                  preStop?: {
                    exec?: {
                      command?: string[];
                    };
                    httpGet?: {
                      host?: string;
                      httpHeaders?: {
                          name: string;
                          value: string;
                        }[];
                      path?: string;
                      port: number | string;
                      scheme?: string;
                    };
                    sleep?: {
                      /** Format: int64 */
                      seconds: number;
                    };
                    tcpSocket?: {
                      host?: string;
                      port: number | string;
                    };
                  };
                };
                livenessProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                name: string;
                ports?: {
                    /** Format: int32 */
                    containerPort: number;
                    hostIP?: string;
                    /** Format: int32 */
                    hostPort?: number;
                    name?: string;
                    /** @default TCP */
                    protocol?: string;
                  }[];
                readinessProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                resizePolicy?: {
                    resourceName: string;
                    restartPolicy: string;
                  }[];
                resources?: {
                  claims?: {
                      name: string;
                    }[];
                  limits?: unknown;
                  requests?: unknown;
                };
                restartPolicy?: string;
                securityContext?: {
                  allowPrivilegeEscalation?: boolean;
                  capabilities?: {
                    add?: string[];
                    drop?: string[];
                  };
                  privileged?: boolean;
                  procMount?: string;
                  readOnlyRootFilesystem?: boolean;
                  /** Format: int64 */
                  runAsGroup?: number;
                  runAsNonRoot?: boolean;
                  /** Format: int64 */
                  runAsUser?: number;
                  seLinuxOptions?: {
                    level?: string;
                    role?: string;
                    type?: string;
                    user?: string;
                  };
                  seccompProfile?: {
                    localhostProfile?: string;
                    type: string;
                  };
                  windowsOptions?: {
                    gmsaCredentialSpec?: string;
                    gmsaCredentialSpecName?: string;
                    hostProcess?: boolean;
                    runAsUserName?: string;
                  };
                };
                startupProbe?: {
                  exec?: {
                    command?: string[];
                  };
                  /** Format: int32 */
                  failureThreshold?: number;
                  grpc?: {
                    /** Format: int32 */
                    port: number;
                    service?: string;
                  };
                  httpGet?: {
                    host?: string;
                    httpHeaders?: {
                        name: string;
                        value: string;
                      }[];
                    path?: string;
                    port: number | string;
                    scheme?: string;
                  };
                  /** Format: int32 */
                  initialDelaySeconds?: number;
                  /** Format: int32 */
                  periodSeconds?: number;
                  /** Format: int32 */
                  successThreshold?: number;
                  tcpSocket?: {
                    host?: string;
                    port: number | string;
                  };
                  /** Format: int64 */
                  terminationGracePeriodSeconds?: number;
                  /** Format: int32 */
                  timeoutSeconds?: number;
                };
                stdin?: boolean;
                stdinOnce?: boolean;
                terminationMessagePath?: string;
                terminationMessagePolicy?: string;
                tty?: boolean;
                volumeDevices?: {
                    devicePath: string;
                    name: string;
                  }[];
                volumeMounts?: {
                    mountPath: string;
                    mountPropagation?: string;
                    name: string;
                    readOnly?: boolean;
                    subPath?: string;
                    subPathExpr?: string;
                  }[];
                workingDir?: string;
              })[];
            nodeName?: string;
            nodeSelector?: {
              [key: string]: string;
            };
            os?: {
              name: string;
            };
            overhead?: {
              [key: string]: number | string;
            };
            preemptionPolicy?: string;
            /** Format: int32 */
            priority?: number;
            priorityClassName?: string;
            readinessGates?: {
                conditionType: string;
              }[];
            resourceClaims?: {
                name: string;
                source?: {
                  resourceClaimName?: string;
                  resourceClaimTemplateName?: string;
                };
              }[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            schedulingGates?: {
                name: string;
              }[];
            securityContext?: {
              /** Format: int64 */
              fsGroup?: number;
              fsGroupChangePolicy?: string;
              /** Format: int64 */
              runAsGroup?: number;
              runAsNonRoot?: boolean;
              /** Format: int64 */
              runAsUser?: number;
              seLinuxOptions?: {
                level?: string;
                role?: string;
                type?: string;
                user?: string;
              };
              seccompProfile?: {
                localhostProfile?: string;
                type: string;
              };
              supplementalGroups?: number[];
              sysctls?: {
                  name: string;
                  value: string;
                }[];
              windowsOptions?: {
                gmsaCredentialSpec?: string;
                gmsaCredentialSpecName?: string;
                hostProcess?: boolean;
                runAsUserName?: string;
              };
            };
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            /** Format: int64 */
            terminationGracePeriodSeconds?: number;
            tolerations?: {
                effect?: string;
                key?: string;
                operator?: string;
                /** Format: int64 */
                tolerationSeconds?: number;
                value?: string;
              }[];
            topologySpreadConstraints?: {
                labelSelector?: {
                  matchExpressions?: {
                      key: string;
                      operator: string;
                      values?: string[];
                    }[];
                  matchLabels?: {
                    [key: string]: string;
                  };
                };
                matchLabelKeys?: string[];
                /** Format: int32 */
                maxSkew: number;
                /** Format: int32 */
                minDomains?: number;
                nodeAffinityPolicy?: string;
                nodeTaintsPolicy?: string;
                topologyKey: string;
                whenUnsatisfiable: string;
              }[];
            volumes?: unknown[];
          };
        };
        workloadRef?: {
          apiVersion?: string;
          kind?: string;
          name?: string;
          scaleDown?: string;
        };
      };
      status?: {
        /** Format: int32 */
        HPAReplicas?: number;
        abort?: boolean;
        /** Format: date-time */
        abortedAt?: string;
        alb?: {
          canaryTargetGroup?: {
            arn: string;
            fullName?: string;
            name: string;
          };
          ingress?: string;
          loadBalancer?: {
            arn: string;
            fullName?: string;
            name: string;
          };
          stableTargetGroup?: {
            arn: string;
            fullName?: string;
            name: string;
          };
        };
        albs?: {
            canaryTargetGroup?: {
              arn: string;
              fullName?: string;
              name: string;
            };
            ingress?: string;
            loadBalancer?: {
              arn: string;
              fullName?: string;
              name: string;
            };
            stableTargetGroup?: {
              arn: string;
              fullName?: string;
              name: string;
            };
          }[];
        /** Format: int32 */
        availableReplicas?: number;
        blueGreen?: {
          activeSelector?: string;
          postPromotionAnalysisRunStatus?: {
            message?: string;
            name: string;
            status: string;
          };
          prePromotionAnalysisRunStatus?: {
            message?: string;
            name: string;
            status: string;
          };
          previewSelector?: string;
          scaleUpPreviewCheckPoint?: boolean;
        };
        canary?: {
          currentBackgroundAnalysisRunStatus?: {
            message?: string;
            name: string;
            status: string;
          };
          currentExperiment?: string;
          currentStepAnalysisRunStatus?: {
            message?: string;
            name: string;
            status: string;
          };
          stablePingPong?: string;
          weights?: {
            additional?: {
                podTemplateHash?: string;
                serviceName?: string;
                /** Format: int32 */
                weight: number;
              }[];
            canary: {
              podTemplateHash?: string;
              serviceName?: string;
              /** Format: int32 */
              weight: number;
            };
            stable: {
              podTemplateHash?: string;
              serviceName?: string;
              /** Format: int32 */
              weight: number;
            };
            verified?: boolean;
          };
        };
        /** Format: int32 */
        collisionCount?: number;
        conditions?: {
            /** Format: date-time */
            lastTransitionTime: string;
            /** Format: date-time */
            lastUpdateTime: string;
            message: string;
            reason: string;
            status: string;
            type: string;
          }[];
        controllerPause?: boolean;
        currentPodHash?: string;
        currentStepHash?: string;
        /** Format: int32 */
        currentStepIndex?: number;
        message?: string;
        observedGeneration?: string;
        pauseConditions?: {
            reason: string;
            /** Format: date-time */
            startTime: string;
          }[];
        phase?: string;
        promoteFull?: boolean;
        /** Format: int32 */
        readyReplicas?: number;
        /** Format: int32 */
        replicas?: number;
        /** Format: date-time */
        restartedAt?: string;
        selector?: string;
        stableRS?: string;
        /** Format: int32 */
        updatedReplicas?: number;
        workloadObservedGeneration?: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
