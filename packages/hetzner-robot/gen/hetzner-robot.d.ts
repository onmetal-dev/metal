/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/server": {
    /**
     * Get all servers
     * @description Query data of all servers
     */
    get: operations["getAllServers"];
  };
  "/server/{server-number}": {
    /**
     * Get server data by server number
     * @description Query server data for a specific server
     */
    get: operations["getServerByNumber"];
    /**
     * Update server name by server number
     * @description Update server name for a specific server
     */
    post: operations["updateServerNameByNumber"];
  };
  "/server/{server-number}/cancellation": {
    /**
     * Get server cancellation data by server number
     * @description Query cancellation data for a server
     */
    get: operations["getServerCancellationByNumber"];
    /**
     * Cancel a server by server number
     * @description Cancel a server
     */
    post: operations["cancelServerByNumber"];
    /**
     * Withdraw a server cancellation by server number
     * @description Withdraw a server cancellation
     */
    delete: operations["withdrawServerCancellationByNumber"];
  };
  "/order/server/product": {
    /**
     * Get a list of server products
     * @description Product overview of currently offered standard server products
     */
    get: operations["getServerProducts"];
  };
  "/order/server/product/{product-id}": {
    /**
     * Query a specific server product
     * @description Query a specific server product
     */
    get: operations["getServerProductById"];
  };
  "/order/server/transaction": {
    /**
     * Order a new server
     * @description Order a new server. If the order is successful, the status code 201 CREATED is returned.
     */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Product ID */
            product_id: string;
            /** @description One or more SSH key fingerprints (Optional, you can use either parameter 'authorized_key' or parameter 'password') */
            authorized_key?: string[];
            /** @description Root password (Optional: you can use either parameter 'authorized_key' or parameter 'password') */
            password?: string;
            /** @description The desired location */
            location?: string;
            /** @description Distribution name which should be preinstalled (optional) */
            dist?: string;
            /** @description Architecture of preinstalled distribution (optional) */
            arch?: string;
            /** @description Language of preinstalled distribution (optional) */
            lang?: string;
            /** @description Order comment (optional); Please note that if a comment is supplied, the order will be processed manually. */
            comment?: string;
            /** @description Array of addon IDs (optional) */
            addon?: string[];
            /**
             * @description The order will not be processed if set to 'true' (optional)
             * @enum {string}
             */
            test?: "true" | "false";
          };
        };
      };
      responses: {
        /** @description Successful order */
        201: {
          content: {
            "application/json": components["schemas"]["OrderServerTransaction"];
          };
        };
        /** @description Invalid input */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorFormatInvalidInput"];
          };
        };
        /** @description Internal error */
        500: {
          content: {
            "application/json": components["schemas"]["ErrorFormat"];
          };
        };
      };
    };
  };
  "/order/server/transaction/{id}": {
    /**
     * Query a specific order transaction
     * @description Retrieve details of a specific server order transaction.
     */
    get: operations["getServerOrderTransactionByID"];
  };
  "/order/server_market/product": {
    /**
     * Retrieve a list of server market products
     * @description Product overview of currently offered server market products
     */
    get: operations["getServerMarketProducts"];
  };
  "/order/server_market/product/{product-id}": {
    /**
     * Query a specific server market product
     * @description Query a specific server market product
     */
    get: operations["getServerMarketProductById"];
  };
  "/order/server_market/transaction": {
    /**
     * Order a new server from the server market
     * @description Order a new server from the server market. If the order is successful, the status code 201 CREATED is returned.
     */
    post: operations["orderServerMarketTransaction"];
  };
  "/order/server_market/transaction/{id}": {
    /**
     * Query a specific order transaction
     * @description Query a specific order transaction by ID
     */
    get: operations["getServerMarketTransactionById"];
  };
  "/order/server_addon/{server-number}/product": {
    /**
     * Retrieve available server addons
     * @description Product overview of available server addons for a specific server
     */
    get: operations["getServerAddonProducts"];
  };
  "/order/server_addon/transaction": {
    /**
     * Order an addon for a server.
     * @description Order an addon for a server. If the order is successful, the status code 201 CREATED will be returned.
     */
    post: operations["orderAddonForServer"];
  };
  "/order/server_addon/transaction/{id}": {
    /**
     * Query a specific order transaction
     * @description Retrieves details of a specific server addon order transaction
     */
    get: operations["getServerAddonTransaction"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ErrorFormat: {
      error?: {
        /** @description HTTP Status Code */
        status?: number;
        /** @description Specific error code */
        code?: string;
        /** @description Specific error message */
        message?: string;
      };
    };
    ErrorFormatInvalidInput: {
      error?: {
        /**
         * @description HTTP Status Code
         * @example 400
         */
        status?: number;
        /** @example INVALID_INPUT */
        code?: string;
        /** @example invalid input */
        message?: string;
        /** @description Array of missing input parameters or null */
        missing?: string[];
        /** @description Array of invalid input parameters or null */
        invalid?: string[];
      };
    };
    AuthError: {
      error?: {
        /**
         * @description HTTP Status Code
         * @example 401
         */
        status?: number;
        /** @example UNAUTHORIZED */
        code?: string;
        /** @example Authentication failed */
        message?: string;
      };
    };
    RateLimitError: {
      error?: {
        /**
         * @description HTTP Status Code
         * @example 403
         */
        status?: number;
        /** @example RATE_LIMIT_EXCEEDED */
        code?: string;
        /** @description Maximum allowed requests */
        max_request?: number;
        /** @description Time interval in seconds */
        interval?: number;
        /** @example rate limit exceeded */
        message?: string;
      };
    };
    MaintenanceError: {
      error?: {
        /**
         * @description HTTP Status Code
         * @example 503
         */
        status?: number;
        /** @example SERVICE_UNAVAILABLE */
        code?: string;
        /** @example Service unavailable due to maintenance */
        message?: string;
      };
    };
    Server: {
      /** @description Server main IP address */
      server_ip?: string;
      /** @description Server main IPv6 net address */
      server_ipv6_net?: string;
      /** @description Server ID */
      server_number?: number;
      /** @description Server name */
      server_name?: string;
      /** @description Server product name */
      product?: string;
      /** @description Data center */
      dc?: string;
      /** @description Free traffic quota, 'unlimited' in case of unlimited traffic */
      traffic?: string;
      /** @description Server status */
      status?: string;
      /** @description Status of server cancellation */
      cancelled?: boolean;
      /** @description Paid until date */
      paid_until?: string;
      /** @description Array of assigned single IP addresses */
      ip?: string[];
      /** @description Array of assigned subnets */
      subnet?: {
          ip?: string;
          mask?: string;
        }[];
    };
    Cancellation: {
      /** @description Server main IP address */
      server_ip?: string;
      /** @description Server main IPv6 address */
      server_ipv6_net?: string;
      /** @description Server ID */
      server_number?: number;
      /** @description Server name */
      server_name?: string;
      /** @description Earliest possible cancellation date */
      earliest_cancellation_date?: string;
      /** @description Status of server cancellation */
      cancelled?: boolean;
      /** @description Indicates whether the current server location is eligible for reservation after server cancellation */
      reservation_possible?: boolean;
      /** @description Indicates whether the current server location will be reserved after server cancellation */
      reserved?: boolean;
      /** @description Cancellation date if cancellation is active, otherwise null */
      cancellation_date?: string;
      /** @description Array of possible cancellation reasons */
      cancellation_reason?: string[];
    };
    Product: {
      /** @description Product ID */
      id?: string;
      /** @description Product name */
      name?: string;
      /** @description Textual description */
      description?: string[];
      /** @description Free traffic quota */
      traffic?: string;
      /** @description Available distributions */
      dist?: string[];
      /**
       * @deprecated
       * @description Available distribution architectures
       */
      arch?: number[];
      /** @description Available distribution languages */
      lang?: string[];
      /** @description Available locations */
      location?: string[];
      prices?: components["schemas"]["ProductPrice"][];
      orderable_addons?: components["schemas"]["ProductAddon"][];
    };
    ProductPrice: {
      /** @description Location */
      location?: string;
      price?: {
        /** @description Monthly price in euros */
        net?: string;
        /** @description Monthly price in euros with VAT */
        gross?: string;
        /** @description Hourly price in euros, if the product is billed hourly */
        hourly_net?: string;
        /** @description Hourly price in euros with VAT, if the product is billed hourly */
        hourly_gross?: string;
      };
      price_setup?: {
        /** @description One time fee in euros */
        net?: string;
        /** @description One time fee in euros with VAT */
        gross?: string;
      };
    };
    ProductAddon: {
      /** @description Addon ID */
      id?: string;
      /** @description Addon name */
      name?: string;
      /** @description Minimum orderable amount */
      min?: number;
      /** @description Maximum orderable amount */
      max?: number;
      prices?: components["schemas"]["ProductAddonPrice"][];
    };
    ProductAddonPrice: {
      /** @description Location */
      location?: string;
      price?: {
        /** @description Monthly price in euros */
        net?: string;
        /** @description Monthly price in euros with VAT */
        gross?: string;
        /** @description Hourly price in euros, if the product is billed hourly */
        hourly_net?: string;
        /** @description Hourly price in euros with VAT, if the product is billed hourly */
        hourly_gross?: string;
      };
      price_setup?: {
        /** @description One time fee in euros */
        net?: string;
        /** @description One time fee in euros with VAT */
        gross?: string;
      };
    };
    ServerProduct: {
      product?: components["schemas"]["Product"];
    };
    OrderServerProduct: {
      /** @description Product ID */
      id?: string;
      /** @description Product name */
      name?: string;
      /** @description Textual description */
      description?: string[];
      /** @description Free traffic quota */
      traffic?: string;
      /** @description Available distributions */
      dist?: string[];
      /** @description Available distribution architectures */
      arch?: number[];
      /** @description Available languages */
      lang?: string[];
      /** @description Available locations */
      location?: string[];
      prices?: components["schemas"]["ProductPrice"][];
      orderable_addons?: components["schemas"]["ProductAddon"][];
    };
    Transaction: {
      /** @description Transaction ID */
      id?: string;
      /** @description Transaction date */
      date?: string;
      /** @description Transaction status, "ready", "in process" or "cancelled" */
      status?: string;
      /** @description Server ID if transaction status is "ready", null otherwise */
      server_number?: number;
      /** @description Server main IP address if transaction status is "ready", null otherwise */
      server_ip?: string;
      /** @description Array with supplied public SSH keys */
      authorized_key?: {
          key?: {
            /** @description Key name */
            name?: string;
            /** @description Key fingerprint */
            fingerprint?: string;
            /** @description Key type */
            type?: string;
            /** @description Key size */
            size?: number;
          };
        }[];
    };
    /** @description Supplied order comment */
    comment: string;
    product: {
      /** @description Product ID */
      id?: string;
      /** @description Product name */
      name?: string;
      /** @description Textual description */
      description?: string[];
      /** @description Free traffic quota */
      traffic?: string;
      /** @description Ordered distribution */
      dist?: string;
      /** @description Ordered distribution architecture */
      "@deprecated arch"?: number;
      /** @description Ordered distribution language */
      lang?: string;
      /** @description Ordered location */
      location?: string;
    };
    /** @description Array of Addon IDs */
    addons: string[];
    OrderServerTransaction: {
      transaction?: {
        /** @description Transaction ID */
        id?: string;
        /** @description Transaction date */
        date?: string;
        /** @description Transaction status, 'ready', 'in process' or 'cancelled' */
        status?: string;
        /** @description Server ID if transaction status is 'ready', null otherwise */
        server_number?: number | null;
        /** @description Server main IP address if transaction status is 'ready', null otherwise */
        server_ip?: string | null;
        /** @description Array with supplied public SSH keys */
        authorized_key?: {
            key?: {
              name?: string;
              fingerprint?: string;
              type?: string;
              size?: number;
            };
          }[];
        /** @description Supplied order comment */
        comment?: string | null;
        product?: {
          /** @description Product ID */
          id?: string;
          /** @description Product name */
          name?: string;
          /** @description Textual description */
          description?: string[];
          /** @description Free traffic quota */
          traffic?: string;
          /** @description Ordered distribution */
          dist?: string;
          /** @description Ordered distribution architecture */
          arch?: string;
          /** @description Ordered distribution language */
          lang?: string;
          /** @description Ordered location */
          location?: string;
        };
        /** @description Array of Addon IDs */
        addons?: string[];
      };
    };
    /** @description Addon ID */
    AddonID: string;
    AuthorizedKey: {
      key?: {
        /** @description Key name */
        name?: string;
        /** @description Key fingerprint */
        fingerprint?: string;
        /** @description Key type */
        type?: string;
        /** @description Key size */
        size?: number;
      };
    };
    HostKey: {
      key?: {
        /** @description Key fingerprint */
        fingerprint?: string;
        /** @description Key type */
        type?: string;
        /** @description Key size */
        size?: number;
      };
    };
    /** @description Supplied order comment */
    OrderComment: string;
    OrderedServerProduct: {
      /** @description Product ID */
      id?: string;
      /** @description Product name */
      name?: string;
      /** @description Textual description */
      description?: string[];
      /** @description Free traffic quota */
      traffic?: string;
      /** @description Ordered distribution */
      dist?: string;
      /** @description Ordered distribution architecture */
      "@deprecated arch"?: number;
      /** @description Ordered distribution language */
      lang?: string;
      /** @description Ordered location */
      location?: string;
    };
    OrderTransaction: {
      /** @description Transaction ID */
      id?: string;
      /** @description Transaction date */
      date?: string;
      /** @description Transaction status, "ready", "in process" or "cancelled" */
      status?: string;
      /** @description Server ID if transaction status is "ready", null otherwise */
      server_number?: number;
      /** @description Server main IP address if transaction status is "ready", null otherwise */
      server_ip?: string;
      /** @description Array with supplied public SSH keys */
      authorized_key?: components["schemas"]["AuthorizedKey"][];
      /** @description Array with servers public host keys */
      host_key?: components["schemas"]["HostKey"][];
      comment?: components["schemas"]["OrderComment"];
      product?: components["schemas"]["OrderedServerProduct"];
      /** @description Array of Addon IDs */
      addons?: components["schemas"]["AddonID"][];
    };
    ServerMarketProduct: {
      /** @description Product ID */
      id?: number;
      /** @description Product name */
      name?: string;
      /** @description Textual description */
      description?: string[];
      /** @description Free traffic quota */
      traffic?: string;
      /** @description Available distributions */
      dist?: string[];
      /**
       * @deprecated
       * @description Available distribution architectures
       */
      arch?: number[];
      /** @description Available distribution languages */
      lang?: string[];
      /** @description CPU model name */
      cpu?: string;
      /** @description CPU benchmark value */
      cpu_benchmark?: number;
      /** @description Main memory size in GB */
      memory_size?: number;
      /** @description Drive size in GB */
      hdd_size?: number;
      /** @description Drive special tags */
      hdd_text?: string;
      /** @description Drive count */
      hdd_count?: number;
      /** @description Data center */
      datacenter?: string;
      /** @description Server network speed */
      network_speed?: string;
      /** @description Monthly price in euros */
      price?: string;
      /** @description Hourly price in euros, if the product is billed hourly, null otherwise */
      price_hourly?: string;
      /** @description One time fee in euros */
      price_setup?: string;
      /** @description Monthly price in euros with VAT */
      price_vat?: string;
      /** @description Hourly price in euros with VAT, if the product is billed hourly, null otherwise */
      price_hourly_vat?: string;
      /** @description One time fee in euros with VAT */
      price_setup_vat?: string;
      /** @description Set to "true" if product has a fixed price */
      fixed_price?: boolean;
      /** @description Countdown until next price reduction in seconds */
      next_reduce?: number;
      /** @description Next price reduction date */
      next_reduce_date?: string;
      /** @description Array of orderable addons */
      orderable_addons?: components["schemas"]["ProductAddon"][];
    };
    ServerMarketProductDetails: {
      /** @description Product ID */
      id?: number;
      /** @description Product name */
      name?: string;
      /** @description Textual description */
      description?: string[];
      /** @description Free traffic quota */
      traffic?: string;
      /** @description Available distributions */
      dist?: string[];
      /** @description Available distribution architectures */
      arch?: number[];
      /** @description Available distribution languages */
      lang?: string[];
      /** @description CPU model name */
      cpu?: string;
      /** @description CPU benchmark value */
      cpu_benchmark?: number;
      /** @description Main memory size in GB */
      memory_size?: number;
      /** @description Drive size in GB */
      hdd_size?: number;
      /** @description Drive special tags */
      hdd_text?: string;
      /** @description Drive count */
      hdd_count?: number;
      /** @description Data center */
      datacenter?: string;
      /** @description Server network speed */
      network_speed?: string;
      /** @description Monthly price in euros */
      price?: string;
      /** @description Hourly price in euros, if the product is billed hourly, null otherwise */
      price_hourly?: string;
      /** @description One time fee in euros */
      price_setup?: string;
      /** @description Monthly price in euros with VAT */
      price_vat?: string;
      /** @description Hourly price in euros with VAT, if the product is billed hourly, null otherwise */
      price_hourly_vat?: string;
      /** @description One time fee in euros with VAT */
      price_setup_vat?: string;
      /** @description Set to "true" if product has a fixed price */
      fixed_price?: boolean;
      /** @description Countdown until next price reduction in seconds */
      next_reduce?: number;
      /** @description Next price reduction date */
      next_reduce_date?: string;
      /** @description Array of orderable addons */
      orderable_addons?: components["schemas"]["ProductAddon"][];
    };
    ServerTransaction: {
      /** @description Transaction ID */
      id?: string;
      /** @description Transaction date */
      date?: string;
      /** @description Transaction status, "ready", "in process" or "cancelled" */
      status?: string;
      /** @description Server ID if transaction status is "ready", null otherwise */
      server_number?: number;
      /** @description Server main IP address if transaction status is "ready", null otherwise */
      server_ip?: string;
      /** @description Array with supplied public SSH keys */
      authorized_key?: components["schemas"]["AuthorizedKey"][];
      /** @description Array with servers public host keys */
      host_key?: components["schemas"]["HostKey"][];
      comment?: components["schemas"]["OrderComment"];
      product?: components["schemas"]["OrderedServerProduct"];
      /** @description Array of Addon IDs */
      addons?: components["schemas"]["AddonID"][];
    };
    ServerTransactionList: components["schemas"]["ServerTransaction"][];
    OrderServerMarketTransaction: {
      /** @description Transaction ID */
      id?: string;
      /** @description Transaction date */
      date?: string;
      /** @description Transaction status, "ready", "in process" or "cancelled" */
      status?: string;
      /** @description Server ID if transaction status is "ready", null otherwise */
      server_number?: number;
      /** @description Server main IP address if transaction status is "ready", null otherwise */
      server_ip?: string;
      /** @description Array with supplied public SSH keys */
      authorized_key?: {
          key?: {
            /** @description Key name */
            name?: string;
            /** @description Key fingerprint */
            fingerprint?: string;
            /** @description Key type */
            type?: string;
            /** @description Key size */
            size?: number;
          };
        }[];
      /** @description Array with servers public host keys */
      host_key?: {
          key?: {
            /** @description Key fingerprint */
            fingerprint?: string;
            /** @description Key type */
            type?: string;
            /** @description Key size */
            size?: number;
          };
        }[];
      /** @description Supplied order comment */
      comment?: string;
      product?: {
        /** @description Product ID */
        id?: string;
        /** @description Product name */
        name?: string;
        /** @description Textual description */
        description?: string[];
        /** @description Free traffic quota */
        traffic?: string;
        /** @description Ordered distribution */
        dist?: string;
        /** @description Ordered distribution architecture */
        arch?: number;
        /** @description Ordered distribution language */
        lang?: string;
        /** @description Ordered location */
        location?: string;
      };
      /** @description Array of Addon IDs */
      addons?: string[];
    };
    ServerMarketTransaction: {
      /** @description Transaction ID */
      id?: string;
      /** @description Transaction date */
      date?: string;
      /** @description Transaction status, "ready", "in process" or "cancelled" */
      status?: string;
      /** @description Server ID if transaction status is "ready", null otherwise */
      server_number?: number;
      /** @description Server main IP address if transaction status is "ready", null otherwise */
      server_ip?: string;
      /** @description Array with supplied public SSH keys */
      authorized_key?: components["schemas"]["AuthorizedKey"][];
      /** @description Array with servers public host keys */
      host_key?: components["schemas"]["HostKey"][];
      comment?: components["schemas"]["OrderComment"];
      product?: components["schemas"]["OrderedServerProduct"];
      /** @description Array of Addon IDs */
      addons?: string[];
    };
    AddonProductPrice: {
      /** @description Location */
      location?: string;
      price?: {
        /** @description Monthly price in euros */
        net?: string;
        /** @description Monthly price in euros with VAT */
        gross?: string;
        /** @description Hourly price in euros, if the product is billed hourly */
        hourly_net?: string;
        /** @description Hourly price in euros with VAT, if the product is billed hourly */
        hourly_gross?: string;
      };
      price_setup?: {
        /** @description One time fee in euros */
        net?: string;
        /** @description One time fee in euros with VAT */
        gross?: string;
      };
    };
    ServerAddonProduct: {
      /** @description Product ID */
      id?: string;
      /** @description Product name */
      name?: string;
      /** @description Product type */
      type?: string;
      price?: components["schemas"]["AddonProductPrice"];
    };
    ServerAddonProductList: components["schemas"]["ServerAddonProduct"][];
    ServerAddonTransaction: {
      /** @description Transaction ID */
      id?: string;
      /** @description Transaction date */
      date?: string;
      /** @description Transaction status, "ready", "in process" or "cancelled" */
      status?: string;
      /** @description Server ID */
      server_number?: number;
      product?: {
        /** @description Product ID */
        id?: string;
        /** @description Product name */
        name?: string;
        /** @description Product type */
        type?: string;
        price?: {
          /** @description Location */
          location?: string;
          price?: {
            /** @description Monthly price in euros */
            net?: string;
            /** @description Monthly price in euros with VAT */
            gross?: string;
            /** @description Hourly price in euros, if the product is billed hourly */
            hourly_net?: string;
            /** @description Hourly price in euros with VAT, if the product is billed hourly */
            hourly_gross?: string;
          };
          price_setup?: {
            /** @description One time fee in euros */
            net?: string;
            /** @description One time fee in euros with VAT */
            gross?: string;
          };
        };
      };
      resources?: {
          /** @description Type of resource */
          type?: string;
          /** @description Resource ID */
          id?: string;
        }[];
    };
    AddonOrderRequest: {
      /**
       * @description Product ID
       * @example additional_ipv4
       */
      product_id: string;
      /**
       * @description Server ID
       * @example 123
       */
      server_number: number;
      /**
       * @description RIPE reason: mandatory for addon types "ip_ipv4", "subnet_ipv4" and "failover_subnet_ipv4"
       * @example VPS
       */
      reason: string;
      /** @description Routing target for subnets: usable for addon type "subnet_ipv4" (Optional: default is the server's primary IP address) */
      gateway?: string;
      /** @description The order will not be processed if set to "true" (optional) */
      test?: boolean;
    };
    AddonOrderResponse: {
      transaction?: {
        /** @description Transaction ID */
        id?: string;
        /** @description Transaction date */
        date?: string;
        /** @description Transaction status, "ready", "in process" or "cancelled" */
        status?: string;
        /** @description Server ID */
        server_number?: number;
        product?: {
          /** @description Product ID */
          id?: string;
          /** @description Product name */
          name?: string;
          /** @description Product type */
          type?: string;
          price?: {
            /** @description Location */
            location?: string;
            price?: {
              /** @description Monthly price in euros */
              net?: string;
              /** @description Monthly price in euros with VAT */
              gross?: string;
              /** @description Hourly price in euros, if the product is billed hourly */
              hourly_net?: string;
              /** @description Hourly price in euros with VAT, if the product is billed hourly */
              hourly_gross?: string;
            };
            price_setup?: {
              /** @description One time fee in euros */
              net?: string;
              /** @description One time fee in euros with VAT */
              gross?: string;
            };
          };
        };
        resources?: {
            /** @description Type of resource */
            type?: string;
            /** @description Resource ID */
            id?: string;
          }[];
      };
    };
    ServerAddonTransactionResponse: {
      transaction?: {
        /** @description Transaction ID */
        id?: string;
        /**
         * Format: date-time
         * @description Transaction date
         */
        date?: string;
        /**
         * @description Transaction status
         * @enum {string}
         */
        status?: "ready" | "in process" | "cancelled";
        /** @description Server ID */
        server_number?: number;
        product?: {
          /** @description Product ID */
          id?: string;
          /** @description Product name */
          name?: string;
          /** @description Product type */
          type?: string;
          price?: {
            /** @description Location */
            location?: string;
            price?: {
              /** @description Monthly price in euros */
              net?: string;
              /** @description Monthly price in euros with VAT */
              gross?: string;
              /** @description Hourly price in euros, if the product is billed hourly */
              hourly_net?: string;
              /** @description Hourly price in euros with VAT, if the product is billed hourly */
              hourly_gross?: string;
            };
            price_setup?: {
              /** @description One time fee in euros */
              net?: string;
              /** @description One time fee in euros with VAT */
              gross?: string;
            };
          };
        };
        resources?: {
            /** @description Type of resource */
            type?: string;
            /** @description Resource ID */
            id?: string;
          }[];
      };
    };
  };
  responses: {
    /** @description A list of server products */
    ServerProductListResponse: {
      content: {
        "application/json": components["schemas"]["ServerProduct"][];
      };
    };
    /** @description Error response */
    ErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description A specific server product details */
    OrderServerProductResponse: {
      content: {
        "application/json": components["schemas"]["OrderServerProduct"];
      };
    };
    /** @description Product not found */
    OrderProductNotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description Overview of all server orders within the last 30 days */
    TransactionListResponse: {
      content: {
        "application/json": components["schemas"]["TransactionList"];
      };
    };
    /** @description No transactions found */
    TransactionNotFoundResponse: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description Successful order */
    OrderServerTransactionResponse: {
      content: {
        "application/json": components["schemas"]["OrderServerTransaction"];
      };
    };
    /** @description A specific order transaction details */
    OrderTransactionResponse: {
      content: {
        "application/json": components["schemas"]["OrderTransaction"];
      };
    };
    /** @description Transaction not found */
    OrderTransactionNotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description A list of server market products */
    ServerMarketProductListResponse: {
      content: {
        "application/json": components["schemas"]["ServerMarketProduct"][];
      };
    };
    /** @description No server market products found */
    ServerMarketProductNotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description A specific server market product details */
    ServerMarketProductDetailsResponse: {
      content: {
        "application/json": components["schemas"]["ServerMarketProductDetails"];
      };
    };
    /** @description Product not found */
    SpecificServerMarketProductNotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description Overview of all server orders within the last 30 days */
    ServerTransactionListResponse: {
      content: {
        "application/json": components["schemas"]["ServerTransactionList"];
      };
    };
    /** @description Order a new server from the server market response */
    OrderServerMarketTransactionSuccess: {
      content: {
        "application/json": components["schemas"]["OrderServerMarketTransaction"];
      };
    };
    /** @description Invalid input parameters */
    OrderServerMarketTransactionInvalidInput: {
      content: {
        "application/json": components["schemas"]["ErrorFormatInvalidInput"];
      };
    };
    /** @description The transaction failed due to an internal error */
    OrderServerMarketTransactionError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description Details of a specific order transaction */
    ServerMarketTransactionResponse: {
      content: {
        "application/json": components["schemas"]["ServerMarketTransaction"];
      };
    };
    /** @description A list of available server addons for a server */
    AddonProductListResponse: {
      content: {
        "application/json": components["schemas"]["ServerAddonProductList"];
      };
    };
    /** @description Overview of all addon orders within the last 30 days */
    ServerAddonTransactionListResponse: {
      content: {
        "application/json": components["schemas"]["ServerAddonTransaction"][];
      };
    };
    /** @description No transactions found */
    ServerAddonTransactionNotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description Invalid input parameters */
    AddonOrderInvalidInput: {
      content: {
        "application/json": components["schemas"]["ErrorFormatInvalidInput"];
      };
    };
    /** @description The transaction cannot be processed due to the reason mentioned in the error message */
    AddonOrderConflict: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description The transaction failed due to an internal error */
    AddonOrderError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
    /** @description Successful response */
    ServerAddonTransactionResponse: {
      content: {
        "application/json": components["schemas"]["ServerAddonTransactionResponse"];
      };
    };
    /** @description Transaction not found */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorFormat"];
      };
    };
  };
  parameters: {
  };
  requestBodies: {
    /** @description Order a new server from the server market. If the order is successful, the status code 201 CREATED is returned. */
    OrderServerMarketTransaction?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Product ID */
          product_id: string;
          /** @description One or more SSH key fingerprints (Optional, you can use either parameter "authorized_key" or parameter "password") */
          authorized_key?: string[];
          /** @description Root password (Optional: you can use either parameter "authorized_key" or parameter "password") */
          password?: string;
          /** @description Distribution name which should be preinstalled (optional) */
          dist?: string;
          /**
           * @deprecated
           * @description Architecture of preinstalled distribution (optional)
           */
          arch?: string;
          /** @description Language of preinstalled distribution (optional) */
          lang?: string;
          /** @description Order comment (optional); Please note that if a comment is supplied, the order will be processed manually. */
          comment?: string;
          /** @description Array of addon IDs (optional) */
          addon?: string[];
          /** @description The order will not be processed if set to "true" (optional) */
          test?: boolean;
        };
      };
    };
  };
  headers: {
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all servers
   * @description Query data of all servers
   */
  getAllServers: {
    responses: {
      /** @description A list of servers */
      200: {
        content: {
          "application/json": components["schemas"]["Server"][];
        };
      };
      /** @description No server found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
    };
  };
  /**
   * Get server data by server number
   * @description Query server data for a specific server
   */
  getServerByNumber: {
    parameters: {
      path: {
        /** @description Server number ID */
        "server-number": number;
      };
    };
    responses: {
      /** @description Server data */
      200: {
        content: {
          "application/json": components["schemas"]["Server"];
        };
      };
      /** @description Server with the specified number not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
    };
  };
  /**
   * Update server name by server number
   * @description Update server name for a specific server
   */
  updateServerNameByNumber: {
    parameters: {
      path: {
        /** @description Server number ID */
        "server-number": number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Server name */
          server_name: string;
        };
      };
    };
    responses: {
      /** @description Updated server data */
      200: {
        content: {
          "application/json": components["schemas"]["Server"];
        };
      };
      /** @description Invalid input parameters */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorFormatInvalidInput"];
        };
      };
      /** @description Server with the specified number not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
    };
  };
  /**
   * Get server cancellation data by server number
   * @description Query cancellation data for a server
   */
  getServerCancellationByNumber: {
    parameters: {
      path: {
        /** @description Server number ID */
        "server-number": number;
      };
    };
    responses: {
      /** @description Server cancellation data */
      200: {
        content: {
          "application/json": components["schemas"]["Cancellation"];
        };
      };
      /** @description Server with the specified number not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
    };
  };
  /**
   * Cancel a server by server number
   * @description Cancel a server
   */
  cancelServerByNumber: {
    parameters: {
      path: {
        /** @description Server number ID */
        "server-number": number;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": {
          /**
           * Format: date
           * @description Date to which the server should be cancelled or 'now' to cancel immediately
           */
          cancellation_date: string;
          /** @description Cancellation reason, optional */
          cancellation_reason?: string;
          /** @description Whether server location shall be reserved ('true' or 'false') */
          reserve_location?: string;
        };
      };
    };
    responses: {
      /** @description Server cancellation data */
      200: {
        content: {
          "application/json": components["schemas"]["Cancellation"];
        };
      };
      /** @description Server with the specified number not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
      /** @description Conflict error (e.g., server already cancelled, active transfer, etc.) */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
    };
  };
  /**
   * Withdraw a server cancellation by server number
   * @description Withdraw a server cancellation
   */
  withdrawServerCancellationByNumber: {
    parameters: {
      path: {
        /** @description Server number ID */
        "server-number": number;
      };
    };
    responses: {
      /** @description No content - Cancellation withdrawn */
      204: {
        content: never;
      };
      /** @description Server with the specified number not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
      /** @description Conflict error (e.g., cancellation cannot be revoked) */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorFormat"];
        };
      };
    };
  };
  /**
   * Get a list of server products
   * @description Product overview of currently offered standard server products
   */
  getServerProducts: {
    parameters: {
      query?: {
        /** @description Minimum monthly price */
        min_price?: string;
        /** @description Maximum monthly price */
        max_price?: string;
        /** @description Minimum one time fee */
        min_price_setup?: string;
        /** @description Maximum one time fee */
        max_price_setup?: string;
        /** @description The desired location */
        location?: string;
      };
    };
    responses: {
      200: components["responses"]["ServerProductListResponse"];
      404: components["responses"]["ErrorResponse"];
    };
  };
  /**
   * Query a specific server product
   * @description Query a specific server product
   */
  getServerProductById: {
    parameters: {
      path: {
        /** @description Product ID */
        "product-id": string;
      };
    };
    responses: {
      200: components["responses"]["OrderServerProductResponse"];
      404: components["responses"]["OrderProductNotFoundError"];
    };
  };
  /**
   * Query a specific order transaction
   * @description Retrieve details of a specific server order transaction.
   */
  getServerOrderTransactionByID: {
    parameters: {
      path: {
        /** @description Transaction ID */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["OrderTransactionResponse"];
      404: components["responses"]["OrderTransactionNotFoundError"];
    };
  };
  /**
   * Retrieve a list of server market products
   * @description Product overview of currently offered server market products
   */
  getServerMarketProducts: {
    responses: {
      200: components["responses"]["ServerMarketProductListResponse"];
      404: components["responses"]["ServerMarketProductNotFoundError"];
    };
  };
  /**
   * Query a specific server market product
   * @description Query a specific server market product
   */
  getServerMarketProductById: {
    parameters: {
      path: {
        /** @description Product ID */
        "product-id": number;
      };
    };
    responses: {
      200: components["responses"]["ServerMarketProductDetailsResponse"];
      404: components["responses"]["SpecificServerMarketProductNotFoundError"];
    };
  };
  /**
   * Order a new server from the server market
   * @description Order a new server from the server market. If the order is successful, the status code 201 CREATED is returned.
   */
  orderServerMarketTransaction: {
    requestBody: components["requestBodies"]["OrderServerMarketTransaction"];
    responses: {
      201: components["responses"]["OrderServerMarketTransactionSuccess"];
      400: components["responses"]["OrderServerMarketTransactionInvalidInput"];
      500: components["responses"]["OrderServerMarketTransactionError"];
    };
  };
  /**
   * Query a specific order transaction
   * @description Query a specific order transaction by ID
   */
  getServerMarketTransactionById: {
    parameters: {
      path: {
        /** @description Transaction ID */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["ServerMarketTransactionResponse"];
      404: components["responses"]["ServerTransactionNotFoundResponse"];
    };
  };
  /**
   * Retrieve available server addons
   * @description Product overview of available server addons for a specific server
   */
  getServerAddonProducts: {
    parameters: {
      path: {
        /** @description The server number */
        "server-number": number;
      };
    };
    responses: {
      200: components["responses"]["AddonProductListResponse"];
      404: components["schemas"]["ErrorFormat"];
    };
  };
  /**
   * Order an addon for a server.
   * @description Order an addon for a server. If the order is successful, the status code 201 CREATED will be returned.
   */
  orderAddonForServer: {
    /** @description Order a new addon for the server. */
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["AddonOrderRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["AddonOrderResponse"];
        };
      };
      400: components["responses"]["AddonOrderInvalidInput"];
      409: components["responses"]["AddonOrderConflict"];
      500: components["responses"]["AddonOrderError"];
    };
  };
  /**
   * Query a specific order transaction
   * @description Retrieves details of a specific server addon order transaction
   */
  getServerAddonTransaction: {
    parameters: {
      path: {
        /** @description Transaction ID */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["ServerAddonTransactionResponse"];
      404: components["responses"]["NotFoundError"];
    };
  };
}
